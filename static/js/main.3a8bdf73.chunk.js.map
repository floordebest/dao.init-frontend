{"version":3,"sources":["kadena-config.js","util.js","Guardians.js","Ambassadors.js","KadenaConfig.js","InitState.js","App.js","serviceWorker.js","index.js"],"names":["host","kadenaAPI","contractName","gasStationName","namespace","contractAddress","gasStationAddress","explorerURL","slice","meta","networkId","chainId","creationTime","Math","round","Date","getTime","gasPrice","gasLimit","ttl","sender","nonce","module","exports","keyFormatter","str","replace","RegExp","k","toUpperCase","useStyles","makeStyles","table","minWidth","useNestedStyles","root","borderBottom","dashStyleNames2Text","split","map","a","join","isRootPactValue","val","renderPactValue","toLocaleString","JSON","stringify","toString","PactSingleJsonAsTable","props","json","isNested","classes","header","valFormatter","internals","Fragment","TableHead","TableRow","TableCell","TableBody","Object","entries","v","key","Array","isArray","Table","className","size","aria-label","TableContainer","component","Paper","PactJsonListAsTable","keyOrder","length","keys","obj","RenderGuardians","guardians","RenderAmbassadors","ambassadors","KadenaConfig","getContractState","cmd","Pact","fetch","local","pactCode","lang","mkMeta","res","all","result","data","console","log","RenderInitState","initState","App","useState","setInitState","setGuardians","setAmbassadors","getInitState","getAmbassadors","getGuardians","useEffect","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","NoSsr","CssBaseline","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3a8bdf73.chunk.js","sourcesContent":["/*\n\nBLOCKCHAIN CONFIGURATION FILE\n\n  initalize all data for pact-lang-api kadena blockchain calls\n\n  modify this file to interact with different\n    chains, networks, contracts\n\n  documentation:\n    https://pact-language.readthedocs.io/en/stable/\n\n  pact tutorials:\n    https://pactlang.org/\n\n*/\n\n//chain that contract lives on\nvar chainId = \"0\";\n\n//id of network version\nvar networkId = \"testnet04\";\n\n//network node\nvar node = \"api.testnet.chainweb.com\";\n\n//unique contract name\nvar contractName = \"init\";\n\n//unique gas station contract name\nvar gasStationName = \"memory-wall-gas-station\";\n\n//namespace that precedes contract name\nvar namespace = \"free\";\n\n//api host to send requests\nvar host = `https://${node}/chainweb/0.0/${networkId}/chain/${chainId}/pact`;\n\n//creation time for request\nvar creationTime = () => Math.round(new Date().getTime() / 1000) - 15;\n\n//JSON with all necessary blockchain call data\nvar kadenaAPI = {\n  contractName: contractName,\n  gasStationName: gasStationName,\n  namespace: namespace,\n  contractAddress: `${namespace}.${contractName}`,\n  gasStationAddress: `${namespace}.${gasStationName}`,\n  explorerURL: `https://explorer.chainweb.com/${networkId.slice(0, -2)}`,\n  meta: {\n    networkId: networkId,\n    chainId: chainId,\n    host: host,\n    creationTime: creationTime,\n    //gas price at lowest possible denomination\n    gasPrice: 0.00000000001,\n    //high gas limit for tx\n    gasLimit: 10000,\n    //time a tx lives in mempool since creationTime\n    ttl: 28800,\n    //sender === gas payer of the transaction\n    //  set to our gas station account defined in memory-wall-gas-station.pact\n    sender: \"mw-free-gas\",\n    //nonce here doesnt matter since the tx will never have the same hash\n    nonce: \"some nonce that doesnt matter\",\n  },\n};\n\nconst keyFormatter = (str) =>\n  str.replace(new RegExp(\"[A-Z]+\",\"gm\"),\" $&\").replace(new RegExp(\"^[a-z]\",\"gm\"),k => k.toUpperCase());\n\nmodule.exports = { kadenaAPI: kadenaAPI, keyFormatter: keyFormatter }\n","// For util functions\nimport React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\n//Table Stuff\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n//Collapse-able Stuff\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst useNestedStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  root: {\n    '& > *': {\n      borderBottom: 'unset',\n    },\n  },\n});\n\n//config file for blockchain calls\n\nexport const dashStyleNames2Text = str => str.split(\"-\").map(k=>k.replace(new RegExp(\"^.\",\"gm\"),a=>a.toUpperCase())).join(' ');\n\nconst isRootPactValue = (val) => {\n  if (typeof val === 'object' ) {\n    if ('timep' in val || 'int' in val || 'decimal' in val || 'time' in val ) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return true;\n  }\n};\n\nconst isPactKeyset = (val) => {\n  if (typeof val === 'object' ) {\n    if (Object.keys(val).length === 2 &&'pred' in val && 'keys' in val) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\n\nexport const renderPactValue = (val) => {\n  if (typeof val === 'object' ) {\n    if ('time' in val) {\n      return val['time'];\n    } else if ('timep' in val) {\n      return val['timep'];\n    } else if ('int' in val) {\n      return typeof val['int'] === 'string' ? val['int'] : val['int'].toLocaleString();\n    } else if ('decimal' in val) {\n      return typeof val['decimal'] === 'string' ? val['decimal'] : val['decimal'].toLocaleString();\n    } else if ('pred' in val && 'keys' in val) {\n      return JSON.stringify(val);\n    } else {\n      return JSON.stringify(val);\n    }\n  } else if (typeof val === 'boolean') {\n    return val.toString();\n  } else if (typeof val === 'string') {\n    return val;\n  } else if (typeof val === 'number'){\n    return val.toLocaleString()\n  } else {\n    return JSON.stringify(val);\n  }\n};\n\nexport const PactSingleJsonAsTable = (props) => {\n  const json = props.json || {};\n  const isNested = props.isNested || false;\n  const classes = isNested ? useNestedStyles : useStyles;\n  const header = props.header || [];\n  const keyFormatter = props.keyFormatter ? props.keyFormatter : (k) => {return (k)};\n  const valFormatter = props.valFormatter ? props.valFormatter : (str) => <code>{renderPactValue(str)}</code>;\n  const internals = () =>\n    <React.Fragment>\n      <TableHead>\n        <TableRow>\n        {header.map((val) => {\n          return <TableCell>{val}</TableCell>;\n        })}\n        </TableRow>\n      </TableHead>\n\n      <TableBody>\n        {Object.entries(json).map(([k,v]) => {\n          return (\n          <TableRow key={k}>\n            { Array.isArray(json) === false ? (\n              <TableCell>{keyFormatter(k)}</TableCell>\n            ) : (\n              <React.Fragment></React.Fragment>\n            )}\n            { isRootPactValue(v) ? (\n              <TableCell>{valFormatter(v)}</TableCell>\n            ) : typeof v === \"object\" ? (\n              <PactSingleJsonAsTable\n                json={v}\n                keyFormatter={keyFormatter}\n                valFormatter={valFormatter}\n                isNested={true}/>\n            ) : typeof v === \"function\" ? (\n              <TableCell>{valFormatter(v.toString())}</TableCell>\n            ) : (\n              <TableCell>{valFormatter(v)}</TableCell>\n            )}\n          </TableRow>\n          )\n        })}\n      </TableBody>\n    </React.Fragment>;\n\n  return (\n    isNested ? (\n      <Table className={classes.table} size='small' aria-label=\"simple table\">\n        {internals()}\n      </Table>\n    ) : (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} size='small' aria-label=\"simple table\">\n        {internals()}\n      </Table>\n    </TableContainer>\n    )\n)};\n\nexport const PactJsonListAsTable = (props) => {\n  const json = props.json || {};\n  const isNested = props.isNested || false;\n  const classes = isNested ? useNestedStyles : useStyles;\n  const header = props.header || [];\n  let keyOrder = [];\n  if (props.keyOrder) {\n    keyOrder = props.keyOrder;\n  } else if (Array.isArray(props.json)) {\n    if ( json.length > 0 ) {\n      keyOrder = Object.keys(json[0]);\n    }\n  }\n  const keyFormatter = props.keyFormatter ? props.keyFormatter : (k) => {return (k)};\n  const valFormatter = props.valFormatter ? props.valFormatter : (str) => <code>{renderPactValue(str)}</code>;\n\n  const internals = () =>\n    <React.Fragment>\n        <TableHead>\n          <TableRow>\n          {header.map((val) => (\n            <TableCell>{val}</TableCell>\n          ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {json.map(obj => (\n            <TableRow key={obj[keyOrder[0]]}>\n              { keyOrder.map(k => {\n                  const v = obj[k];\n                  return (\n                    <TableCell>\n                      {isRootPactValue(v) ? (\n                          valFormatter(v)\n                      ) : Array.isArray(v) ? (\n                          <PactJsonListAsTable\n                            json={v}\n                            keyFormatter={keyFormatter}\n                            valFormatter={valFormatter}\n                            isNested={true}/>\n                      ) : typeof v === \"object\" ? (\n                          <PactSingleJsonAsTable\n                            json={v}\n                            keyFormatter={keyFormatter}\n                            valFormatter={valFormatter}\n                            isNested={true}/>\n                      ) : typeof v === \"function\" ? (\n                          valFormatter(v.toString())\n                      ) : (\n                          valFormatter(v)\n                      )}\n                    </TableCell>\n                  )\n                }\n            )}\n            </TableRow>\n          ))}\n      </TableBody>\n    </React.Fragment>;\n\n  return (\n    isNested ? (\n      <Table className={classes.table} size='small' aria-label=\"simple table\">\n        {internals()}\n      </Table>\n    ) : (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} size='small' aria-label=\"simple table\">\n        {internals()}\n      </Table>\n    </TableContainer>\n    )\n)};\n","//basic React api imports\nimport React, { useState, } from \"react\";\n//semantic ui for styling\nimport {FormControl as Form} from '@material-ui/core';\nimport Input from '@material-ui/core/Input';\n// import Message from '@material-ui/core/Message';\nimport Button from '@material-ui/core/Button';\n//pact-lang-api for blockchain calls\nimport Pact from \"pact-lang-api\";\n//config file for blockchain calls\nimport { kadenaAPI } from \"./kadena-config.js\";\nimport {\n  PactJsonListAsTable,\n } from \"./util.js\";\n// import { PactTxStatus } from \"./PactTxStatus.js\"\n\nconst sendGuardianCmd = async (\n  setTx,\n  setTxStatus,\n  setTxRes,\n  refresh,\n  user, cmd, envData={}\n) => {\n    try {\n      //creates transaction to send to wallet\n      const toSign = {\n          pactCode: cmd,\n          caps: Pact.lang.mkCap(\"Guadian Cap\"\n                           , \"Authenticates that your a guardian\"\n                           , `${kadenaAPI.contractAddress}.GUARDIAN`\n                           , [user]),\n          gasLimit: kadenaAPI.meta.gasLimit,\n          chainId: kadenaAPI.meta.chainId,\n          ttl: kadenaAPI.meta.ttl,\n          sender: user,\n          envData: envData\n      }\n      console.log(\"toSign\", toSign)\n      //sends transaction to wallet to sign and awaits signed transaction\n      const signed = await Pact.wallet.sign(toSign)\n      console.log(\"signed\", signed)\n      setTx(signed)\n      //sends signed transaction to blockchain\n      const txReqKeys = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n      console.log(\"txReqKeys\", txReqKeys)\n      //set html to wait for transaction response\n      //set state to wait for transaction response\n      setTxStatus('pending')\n      try {\n        //listens to response to transaction sent\n        //  note method will timeout in two minutes\n        //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n        let retries = 8;\n        let res = {};\n        while (retries > 0) {\n          //sleep the polling\n          await new Promise(r => setTimeout(r, 15000));\n          res = await Pact.fetch.poll(txReqKeys, kadenaAPI.meta.host);\n          try {\n            if (res[signed.hash].result.status) {\n              retries = -1;\n            } else {\n              retries = retries - 1;\n            }\n          } catch(e) {\n              retries = retries - 1;\n          }\n        };\n        //keep transaction response in local state\n        setTxRes(res)\n        if (res[signed.hash].result.status === \"success\"){\n          console.log(\"tx status set to success\");\n          //set state for transaction success\n          setTxStatus('success');\n          refresh();\n        } else if (retries === 0) {\n          console.log(\"tx status set to timeout\");\n          setTxStatus('timeout');\n          refresh();\n        } else {\n          console.log(\"tx status set to failure\");\n          //set state for transaction failure\n          setTxStatus('failure');\n        }\n      } catch(e) {\n        // TODO: use break in the while loop to capture if timeout occured\n        console.log(\"tx api failure\",e);\n        setTxRes(e);\n        setTxStatus('failure');\n      }\n    } catch(e) {\n      console.log(e);\n      console.log(\"tx status set to validation error\");\n      //set state for transaction construction error\n      setTxStatus('validation-error');\n    }\n};\n\nexport const RenderGuardians = (props) => {\n  return (\n    <PactJsonListAsTable\n      header={[\"Guardian\",\"Committed KDA\",\"Approved Hash\",\"Approval Date\",\"Guard\"]}\n      keyOrder={[\"k\",\"committed-kda\",\"approved-hash\",\"approved-date\",\"guard\"]}\n      json={props.guardians}\n    />\n)};\n\n// export const RegisterAmbassador = (props) => {\n//   const [grd, setGrd] = useState( \"\" );\n//   const [newAmb, setNewAmb] = useState( \"\" );\n//   const [ambGrd, setAmbGrd] = useState( \"\" );\n//   const [txStatus, setTxStatus] = useState(\"\");\n//   const [tx, setTx] = useState( {} );\n//   const [txRes, setTxRes] = useState( {} );\n//\n//   const handleSubmit = (evt) => {\n//       evt.preventDefault();\n//       console.log(grd,newAmb,ambGrd);\n//       sendGuardianCmd(setTx,setTxStatus,setTxRes,props.refresh\n//         ,grd\n//         ,`(${kadenaAPI.contractAddress}.register-ambassador \"${grd}\" \"${newAmb}\" (read-keyset 'ks))`\n//         ,{ks: JSON.parse(ambGrd)}\n//         )\n//       };\n//\n//   return (\n//     <div>\n//       <Message attached header=\"Add Ambassador\"/>\n//       <Form onSubmit={evt => handleSubmit(evt)} className=\"attached fluid segment\">\n//         <Form.Select\n//           label=\"Select Guardian\"\n//           required\n//           options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n//           onChange={(e,d) => {setGrd(d.value)}}\n//           />\n//         <Form.Field required>\n//           <label>Ambassador Account Name</label>\n//           <Input required\n//             value={newAmb}\n//             onChange={e => setNewAmb(e.target.value)}/>\n//         </Form.Field>\n//         <Form.TextArea required\n//           label=\"Ambassador Account Guard\"\n//           placeholder={JSON.stringify({\"pred\":\"keys-all\",\"keys\":[\"8c59a322800b3650f9fc5b6742aa845bc1c35c2625dabfe5a9e9a4cada32c543\"]},undefined,2)}\n//           value={ambGrd}\n//           onChange={e => setAmbGrd(e.target.value)}\n//           />\n//         <Button color='blue' type='submit'>Submit</Button>\n//       </Form>\n//       <PactTxStatus tx={tx} txRes={txRes} txStatus={txStatus}/>\n//     </div>\n//\n//   );\n// };\n//\n// export const DeactivateAmbassador = (props) => {\n//   const [grd, setGrd] = useState( \"\" );\n//   const [newAmb, setNewAmb] = useState( \"\" );\n//   const [txStatus, setTxStatus] = useState(\"\");\n//   const [tx, setTx] = useState( {} );\n//   const [txRes, setTxRes] = useState( {} );\n//\n//   const handleSubmit = (evt) => {\n//       evt.preventDefault();\n//       // console.log(grd,newAmb);\n//       sendGuardianCmd(setTx,setTxStatus,setTxRes,props.refresh\n//         ,grd\n//         ,`(${kadenaAPI.contractAddress}.deactivate-ambassador \"${grd}\" \"${newAmb}\")`\n//         )\n//       };\n//\n//   return (\n//     <div>\n//       <Message attached header=\"Deactivate Ambassador\"/>\n//       <Form onSubmit={(evt)=>handleSubmit(evt)} className=\"attached fluid segment\">\n//         <Form.Select\n//           label=\"Select Guardian\"\n//           required\n//           options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n//           onChange={(e,d) => {setGrd(d.value)}}\n//           />\n//         <Form.Select\n//           label=\"Select Ambassador\"\n//           required\n//           options={props.ambassadors.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n//           onChange={e => setNewAmb(e.target.value)}/>\n//         <Button color='blue' type='submit'>Submit</Button>\n//       </Form>\n//       <PactTxStatus tx={tx} txRes={txRes} txStatus={txStatus}/>\n//     </div>\n//\n//   );\n// };\n//\n// export const ReactivateAmbassador = (props) => {\n//   const [grd, setGrd] = useState( \"\" );\n//   const [amb, setAmb] = useState( \"\" );\n//   const [txStatus, setTxStatus] = useState(\"\");\n//   const [tx, setTx] = useState( {} );\n//   const [txRes, setTxRes] = useState( {} );\n//\n//   const handleSubmit = (evt) => {\n//       evt.preventDefault();\n//       // console.log(grd,newAmb);\n//       sendGuardianCmd(setTx,setTxStatus,setTxRes,props.refresh\n//         ,grd\n//         ,`(${kadenaAPI.contractAddress}.reactivate-ambassador \"${grd}\" \"${amb}\")`\n//         )\n//       };\n//\n//   return (\n//     <div>\n//       <Message attached header=\"Reactivate Ambassador\"/>\n//       <Form onSubmit={evt => handleSubmit(evt)} className=\"attached fluid segment\">\n//         <Form.Select\n//           label=\"Select Guardian\"\n//           required\n//           options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n//           onChange={(e,d) => {setGrd(d.value)}}\n//           />\n//         <Form.Select\n//           label=\"Select Ambassador\"\n//           required\n//           options={props.ambassadors.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n//           onChange={(e,d) => setAmb(d.value)}/>\n//         <Button color='blue' type='submit'>Submit</Button>\n//       </Form>\n//       <PactTxStatus tx={tx} txRes={txRes} txStatus={txStatus}/>\n//     </div>\n//\n//   );\n// }\n//\n// export const RotateGuardian = (props) => {\n//   const [grd, setGrd] = useState( \"\" );\n//   const [ks, setKs] = useState( \"\" );\n//   const [txStatus, setTxStatus] = useState( \"\" );\n//   const [tx, setTx] = useState( {} );\n//   const [txRes, setTxRes] = useState( {} );\n//\n//   const handleSubmit = (evt) => {\n//       evt.preventDefault();\n//       // console.log(grd,newAmb);\n//       sendGuardianCmd(setTx,setTxStatus,setTxRes,props.refresh\n//         ,grd\n//         ,`(${kadenaAPI.contractAddress}.reactivate-ambassador \"${grd}\" (read-keyset 'ks))`\n//         ,{ks: JSON.parse(ks)})\n//       };\n//\n//   return (\n//     <div>\n//       <Message attached header=\"Rotate Guardian\"/>\n//       <Form onSubmit={evt => handleSubmit(evt)} className=\"attached fluid segment\">\n//         <Form.Select\n//           label=\"Select Guardian\"\n//           required\n//           options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n//           onChange={(e,d) => {setGrd(d.value)}}\n//           />\n//         <Form.TextArea required\n//           label=\"Enter new KeySet\"\n//           placeholder={JSON.stringify({\"pred\":\"keys-all\",\"keys\":[\"8c59a322800b3650f9fc5b6742aa845bc1c35c2625dabfe5a9e9a4cada32c543\"]},undefined,2)}\n//           value={ks}\n//           onChange={e => setKs(e.target.value)}\n//           />\n//         <Button color='blue' type='submit'>Submit</Button>\n//       </Form>\n//       <PactTxStatus tx={tx} txRes={txRes} txStatus={txStatus}/>\n//     </div>\n//\n//   );\n// }\n","//basic React api imports\nimport React from \"react\";\n//config file for blockchain calls\nimport { PactJsonListAsTable } from \"./util.js\";\n\n\nexport const RenderAmbassadors = (props) => {\n  return (\n    <PactJsonListAsTable\n      header={[\"Ambassador\",\"Active\",\"Voted to Freeze\",\"Guard\"]}\n      keyOrder={[\"k\",\"active\",\"voted-to-freeze\",\"guard\"]}\n      json={props.ambassadors}\n    />\n)};\n","//basic React api imports\nimport React from \"react\";\nimport { kadenaAPI, keyFormatter } from \"./kadena-config.js\";\nimport { PactSingleJsonAsTable } from \"./util.js\";\n\nexport const KadenaConfig = () => {\n  return (\n    <PactSingleJsonAsTable\n      json={kadenaAPI}\n      keyFormatter={keyFormatter}\n      />\n  )\n};\n","//basic React api imports\nimport React from \"react\";\n//config file for blockchain calls\nimport Pact from \"pact-lang-api\";\nimport { kadenaAPI } from \"./kadena-config.js\";\nimport { PactSingleJsonAsTable, dashStyleNames2Text } from \"./util.js\";\n\nexport const getContractState = async (cmd) => {\n  //calling get-all() function from smart contract\n    const res = await Pact.fetch.local(\n      {\n        pactCode: `(${kadenaAPI.contractAddress}.${cmd})`,\n        //pact-lang-api function to construct transaction meta data\n        meta: Pact.lang.mkMeta(\n          kadenaAPI.meta.sender,\n          kadenaAPI.meta.chainId,\n          kadenaAPI.meta.gasPrice,\n          kadenaAPI.meta.gasLimit,\n          kadenaAPI.meta.creationTime(),\n          kadenaAPI.meta.ttl\n        ),\n      },\n      kadenaAPI.meta.host\n    );\n    const all = res.result.data;\n    //sorts memories by least recent\n    console.log(\"local query data\",all);\n    return(all);\n};\n\nexport const RenderInitState = (props) => {\n  return (\n   <PactSingleJsonAsTable\n    json={props.initState}\n    header={[\"\",\"Status\"]}\n    keyFormatter={dashStyleNames2Text}\n    />\n  )\n};\n","//basic React api imports\nimport React, { useState, useEffect } from \"react\";\n//semantic ui for styling\nimport Container from '@material-ui/core/Container';\n//config file for blockchain calls\nimport  {\n  RenderGuardians,\n  // RegisterAmbassador,\n  // DeactivateAmbassador,\n  // ReactivateAmbassador,\n  // RotateGuardian,\n} from \"./Guardians.js\";\nimport { RenderAmbassadors } from \"./Ambassadors.js\";\nimport { KadenaConfig } from \"./KadenaConfig.js\"\nimport { RenderInitState, getContractState } from \"./InitState.js\";\n\nconst App = () => {\n  /*\n\n    REACT COMPONENT SETUP\n\n      we will make use of standard react apis\n\n      useState -> page state management\n      useEffect -> fetch existing memories on page load\n\n  */\n\n  const [initState, setInitState] = useState( {} );\n  const [guardians, setGuardians] = useState( [] );\n  const [ambassadors, setAmbassadors] = useState( [] );\n\n  const getInitState = async () => {\n    const res = await getContractState(\"view-state\");\n    setInitState(res);\n  };\n\n  const getAmbassadors = async () => {\n    const res = await getContractState(\"view-ambassadors\");\n    setAmbassadors(res);\n  };\n\n  const getGuardians = async () => {\n    const res = await getContractState(\"view-guardians\");\n    setGuardians(res);\n  };\n\n  useEffect(() => {\n    getGuardians();\n    getInitState();\n    getAmbassadors();\n    console.log('useEffect []',guardians,ambassadors)\n  }, []);\n\n\n  /*\n\n    BLOCKCHAIN TRANSACTIONS\n\n      use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n\n      all transaction setup is ./kadena-config.js\n\n  */\n\n\n  return (\n    <Container>\n      <h1>\n        <a>Welcome to DAO.init</a>\n      </h1>\n      <KadenaConfig/>\n      <h2>\n        Contract State\n      </h2>\n      <RenderInitState initState={initState}/>\n      <h2>\n        Guardians\n      </h2>\n      <RenderGuardians guardians={guardians}/>\n      <h2>\n        Ambassadors\n      </h2>\n      <RenderAmbassadors ambassadors={ambassadors}/>\n    </Container>\n  );\n};\n\n      // <RegisterAmbassador\n      //   guardians={guardians}\n      //   refresh={() => getAmbassadors()}/>\n      // <ReactivateAmbassador\n      //   guardians={guardians}\n      //   ambassadors={ambassadors}\n      //   refresh={() => getAmbassadors()}/>\n      // <DeactivateAmbassador\n      //   guardians={guardians}\n      //   ambassadors={ambassadors}\n      //   refresh={() => getAmbassadors()}/>\n      // <RotateGuardian\n      //   guardians={guardians}\n      //   refresh={() => getGuardians()}/>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, } from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <NoSsr>\n        <CssBaseline/>\n        <Router basename={process.env.PUBLIC_URL}>\n          <App />\n        </Router>\n      </NoSsr>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}