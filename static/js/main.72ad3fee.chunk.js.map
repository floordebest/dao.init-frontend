{"version":3,"sources":["util.js","Guardians.js","Ambassadors.js","InitState.js","App.js","serviceWorker.js","index.js","kadena-config.js"],"names":["renderPactValue","val","split","JSON","stringify","RenderGuardians","props","className","guardians","map","g","key","RenderAmbassadors","ambassadors","RenderInitState","initState","App","useState","setInitState","setGuardians","setAmbassadors","txStatus","setTxStatus","tx","setTx","getInitState","a","getContractState","res","getAmbassadors","getGuardians","useEffect","cmd","Pact","fetch","local","pactCode","kadenaAPI","contractAddress","meta","lang","mkMeta","sender","chainId","gasPrice","gasLimit","creationTime","ttl","host","all","result","data","console","log","sendGuardianCmd","user","envData","toSign","caps","mkCap","wallet","sign","signed","sendSigned","txReqKeys","retries","Promise","r","setTimeout","poll","hash","status","e","AddAmbassador","grd","setGrd","newAmb","setNewAmb","ambGrd","setAmbGrd","Message","attached","header","Form","onSubmit","evt","preventDefault","ks","parse","Dropdown","fluid","search","selection","placeholder","required","options","value","text","onChange","d","Field","target","TextArea","label","Button","color","type","txPending","txSuccess","txFailure","txTimeout","txValidationError","icon","info","Icon","name","loading","Content","Header","href","explorerURL","error","warning","Segment","raised","padded","style","margin","networkId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","contractName","gasStationName","namespace","gasStationAddress","slice","Math","round","Date","getTime","nonce","module","exports"],"mappings":"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","file":"static/js/main.72ad3fee.chunk.js","sourcesContent":["// For util functions\n\nexport const renderPactValue = (val) => {\n  if (typeof val === 'object' ) {\n    if ('time' in val) {\n      return val['time'];\n    } else if ('timep' in val) {\n      return val['timep'].split('.')[0] + \"Z\";\n    } else if ('int' in val) {\n      return val['int'];\n    } else if ('decimal' in val) {\n      return val['decimal'];\n    } else {\n      return JSON.stringify(val);\n    }\n  } else if (typeof val === 'boolean') {\n    return JSON.stringify(val);\n  } else {\n    return val;\n  }\n};\n","//basic React api imports\nimport React from \"react\";\n//config file for blockchain calls\nimport { renderPactValue } from \"./util.js\";\n\n\nexport const RenderGuardians = (props) => {\n  return (\n    <table className=\"ui very basic collapsing celled table\">\n      <thead>\n        <tr>\n          <th>Guardian</th>\n          <th>Committed KDA</th>\n          <th>Approved Hash</th>\n          <th>Approval Date</th>\n          <th>Guard</th>\n        </tr>\n     </thead>\n     <tbody>\n      { props.guardians.map((g) => {return(\n        <tr key={g[\"k\"]}>\n          <td>\n            {g[\"k\"]}\n          </td>\n          <td>\n            {renderPactValue(g[\"committed-kda\"])}\n          </td>\n          <td>\n            {g[\"approved-hash\"]}\n          </td>\n          <td>\n            {renderPactValue(g[\"approved-date\"])}\n          </td>\n          <td>\n            {renderPactValue(g[\"guard\"])}\n          </td>\n        </tr>\n      )})}\n    </tbody>\n  </table>\n  )\n};\n","//basic React api imports\nimport React from \"react\";\n//config file for blockchain calls\nimport { renderPactValue } from \"./util.js\";\n\n\nexport const RenderAmbassadors = (props) => {\n  return (\n    <table className=\"ui very basic collapsing celled table\">\n      <thead>\n        <tr>\n          <th>Ambassador</th>\n          <th>Active</th>\n          <th>Voted To Freeze</th>\n          <th>Guard</th>\n        </tr>\n     </thead>\n     <tbody>\n      { props.ambassadors.map((g) => {return(\n        <tr key={g[\"k\"]}>\n          <td>\n            {g[\"k\"]}\n          </td>\n          <td>\n            {renderPactValue(g[\"active\"])}\n          </td>\n          <td>\n            {renderPactValue(g[\"voted-to-freeze\"])}\n          </td>\n          <td>\n            {renderPactValue(g[\"guard\"])}\n          </td>\n        </tr>\n      )})}\n    </tbody>\n  </table>\n  )\n};\n","//basic React api imports\nimport React from \"react\";\n//config file for blockchain calls\nimport { renderPactValue } from \"./util.js\";\n\nexport const RenderInitState = (props) => {\n  return (\n    <table className=\"ui very basic collapsing celled table\">\n      <thead>\n        <tr>\n          <th></th>\n          <th>Status</th>\n        </tr>\n     </thead>\n     <tbody>\n       <tr>\n         <td>\n           <h4>\n             Guardians\n           </h4>\n         </td>\n         <td>\n            { renderPactValue( props.initState[\"guardian-count\"]) }\n         </td>\n       </tr>\n       <tr>\n         <td>\n           <h4>\n             Ambassadors\n           </h4>\n         </td>\n         <td>\n           { renderPactValue( props.initState[\"ambassador-count\"]) }\n         </td>\n       </tr>\n       <tr>\n         <td>\n           <h4>\n             DAO Frozen Until\n           </h4>\n         </td>\n         <td>\n          { renderPactValue( props.initState[\"dao-frozen-until\"]) }\n         </td>\n       </tr>\n       <tr>\n         <td>\n           <h4>\n             Last Ambassador Deactivation\n           </h4>\n         </td>\n         <td>\n           { renderPactValue( props.initState[\"last-ambassador-deactivation\"]) }\n         </td>\n       </tr>\n       <tr>\n         <td>\n           <h4>\n             Proposed Upgrade Hash\n           </h4>\n         </td>\n         <td>\n           { renderPactValue( props.initState[\"proposed-upgrade-hash\"]) }\n         </td>\n       </tr>\n       <tr>\n         <td>\n           <h4>\n             Proposed Upgrade Time\n           </h4>\n         </td>\n         <td>\n           { renderPactValue( props.initState[\"proposed-upgrade-time\"]) }\n         </td>\n       </tr>\n     </tbody>\n   </table>\n  )\n};\n","//basic React api imports\nimport React, { useState, useEffect } from \"react\";\n//semantic ui for styling\nimport {\n  Segment,\n  Input,\n  Form,\n  Button,\n  Select,\n  Feed,\n  Dropdown,\n  Icon,\n  Message,\n  Loader,\n} from \"semantic-ui-react\";\n//pact-lang-api for blockchain calls\nimport Pact from \"pact-lang-api\";\n//config file for blockchain calls\nimport { kadenaAPI } from \"./kadena-config.js\";\nimport { renderPactValue } from \"./util.js\";\nimport { RenderGuardians } from \"./Guardians.js\";\nimport { RenderAmbassadors } from \"./Ambassadors.js\";\nimport { RenderInitState } from \"./InitState.js\";\n\nconst App = () => {\n  /*\n\n    REACT COMPONENT SETUP\n\n      we will make use of standard react apis\n\n      useState -> page state management\n      useEffect -> fetch existing memories on page load\n\n  */\n\n  const [initState, setInitState] = useState( {} );\n  const [guardians, setGuardians] = useState( [] );\n  const [ambassadors, setAmbassadors] = useState( [] );\n  const [txStatus, setTxStatus] = useState(\"\");\n  const [tx, setTx] = useState( {} );\n\n  const getInitState = async () => {\n    const res = await getContractState(\"view-state\");\n    setInitState(res);\n  };\n\n  const getAmbassadors = async () => {\n    const res = await getContractState(\"view-ambassadors\");\n    setAmbassadors(res);\n  };\n\n  const getGuardians = async () => {\n    const res = await getContractState(\"view-guardians\");\n    setGuardians(res);\n  };\n\n  useEffect(() => {\n    getInitState();\n    getAmbassadors();\n    getGuardians();\n  }, []);\n\n  /*\n\n    BLOCKCHAIN TRANSACTIONS\n\n      use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n\n      all transaction setup is ./kadena-config.js\n\n  */\n\n  const getContractState = async (cmd) => {\n    //calling get-all() function from smart contract\n      const res = await Pact.fetch.local(\n        {\n          pactCode: `(${kadenaAPI.contractAddress}.${cmd})`,\n          //pact-lang-api function to construct transaction meta data\n          meta: Pact.lang.mkMeta(\n            kadenaAPI.meta.sender,\n            kadenaAPI.meta.chainId,\n            kadenaAPI.meta.gasPrice,\n            kadenaAPI.meta.gasLimit,\n            kadenaAPI.meta.creationTime(),\n            kadenaAPI.meta.ttl\n          ),\n        },\n        kadenaAPI.meta.host\n      );\n      const all = res.result.data;\n      //sorts memories by least recent\n      console.log(\"local query data\",all);\n      return(all);\n  };\n\n  //send call\n\n  //  writes memory blockchain\n  //  updates frontend depending on response\n  // THIS IS FOR SIGNING API CONFIG\n  const sendGuardianCmd = async (user, cmd, envData) => {\n      try {\n        //creates transaction to send to wallet\n        const toSign = {\n            pactCode: cmd,\n            caps: Pact.lang.mkCap(\"Guadian Cap\"\n                             , \"Authenticates that your a guardian\"\n                             , `${kadenaAPI.contractAddress}.GUARDIAN`\n                             , [user]),\n            gasLimit: kadenaAPI.meta.gasLimit,\n            chainId: kadenaAPI.meta.chainId,\n            ttl: kadenaAPI.meta.ttl,\n            sender: user,\n            envData: envData || {}\n        }\n        console.log(\"toSign\", toSign)\n        //sends transaction to wallet to sign and awaits signed transaction\n        const signed = await Pact.wallet.sign(toSign)\n        console.log(\"signed\", signed)\n        setTx(signed)\n        //sends signed transaction to blockchain\n        const txReqKeys = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n        console.log(\"txReqKeys\", txReqKeys)\n        //set html to wait for transaction response\n        //set state to wait for transaction response\n        setTxStatus('pending')\n        try {\n          //listens to response to transaction sent\n          //  note method will timeout in two minutes\n          //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n          let retries = 8;\n          let res = {};\n          while (retries > 0) {\n            //sleep the polling\n            await new Promise(r => setTimeout(r, 15000));\n            res = await Pact.fetch.poll(txReqKeys, kadenaAPI.meta.host);\n            try {\n              if (res[signed.hash].result.status) {\n                retries = 0;\n              } else {\n                retries = retries - 1;\n              }\n            } catch(e) {\n                retries = retries - 1;\n            }\n          };\n          //keep transaction response in local state\n          setTx(res)\n          if (res[signed.hash].result.status === \"success\"){\n            console.log(\"tx status set to success\");\n            //set state for transaction success\n            setTxStatus('success')\n          } else {\n            console.log(\"tx status set to failure\");\n            //set state for transaction failure\n            setTxStatus('failure')\n          }\n        } catch(e){\n          console.log(e);\n          console.log(\"tx status set to timeout\");\n          //set state for transaction listening timeout\n          setTxStatus('timeout')\n        }\n      } catch(e){\n        console.log(e);\n        console.log(\"tx status set to validation error\");\n        //set state for transaction construction error\n        setTxStatus('validation-error')\n      }\n  }\n  const AddAmbassador = (props) => {\n    const [grd, setGrd] = useState( \"\" );\n    const [newAmb, setNewAmb] = useState( \"\" );\n    const [ambGrd, setAmbGrd] = useState( \"\" );\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        console.log(grd,newAmb,ambGrd);\n        sendGuardianCmd(grd\n          ,`(${kadenaAPI.contractAddress}.register-ambassador \"${grd}\" \"${newAmb}\" (read-keyset 'ks))`\n          ,{ks: JSON.parse(ambGrd)})\n        };\n\n    return (\n      <div>\n        <Message attached header=\"Add Ambassador\"/>\n          <Form onSubmit={handleSubmit} className=\"attached fluid segment\">\n            <Dropdown\n              fluid\n              search\n              selection\n              placeholder=\"Select Guardian\"\n              required\n              options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n              onChange={(e,d) => {setGrd(d.value)}}\n              >\n            </Dropdown>\n            <Form.Field required>\n              <label>Ambassador Account Name</label>\n              <input\n                value={newAmb}\n                onChange={e => setNewAmb(e.target.value)}/>\n            </Form.Field>\n            <Form.TextArea required\n              label=\"Ambassador Account Guard\"\n              value={ambGrd}\n              onChange={e => setAmbGrd(e.target.value)}\n              />\n            <Button color='blue' type='submit'>Submit</Button>\n          </Form>\n          {txStatus === \"pending\" ? (\n            txPending()\n          ) : txStatus === \"success\" ? (\n            txSuccess()\n          ) : txStatus === \"failure\" ? (\n            txFailure()\n          ) : txStatus === \"timeout\" ? (\n            txTimeout()\n          ) : txStatus === \"validation-error\" ? (\n            txValidationError()\n          ) : (\n            <div />\n          )}\n      </div>\n\n    );\n  }\n  /*\n\n    FRONTEND ACTIONS\n\n      react components for corresponding tx status\n        see line 318 for if/else logic\n\n  */\n\n  const txPending = () => {\n    return (\n      <Message icon attached=\"bottom\" info>\n        <Icon name='circle notched' loading />\n        <Message.Content>\n          <Message.Header>\n            Transaction Sent\n          </Message.Header>\n          Awaiting Confirmation\n        </Message.Content>\n      </Message>\n    );\n  };\n  const txSuccess = () => {\n    return (\n      <Message icon attached=\"bottom\" info>\n        <Icon name='check square outline' />\n        <Message.Content>\n          <Message.Header>\n            Transaction Confirmed\n          </Message.Header>\n          <a href={`${kadenaAPI.explorerURL}/tx/${tx.hash}`}>\n            View transaction in Block Explorer\n          </a>\n        </Message.Content>\n      </Message>\n    );\n  };\n\n  const txFailure = () => {\n    return (\n      <Message icon attached=\"bottom\" error>\n        <Icon name='exclaimation circle outline' />\n        <Message.Content>\n          <Message.Header>\n            Transaction Failure\n          </Message.Header>\n          <p>{JSON.stringify(tx)}</p>\n          <a href={`${kadenaAPI.explorerURL}/tx/${tx.hash}`}>\n            View transaction in Block Explorer\n          </a>\n        </Message.Content>\n      </Message>\n    );\n  };\n\n  const txValidationError = () => {\n    return (\n      <Message icon attached=\"bottom\" error>\n        <Icon name='exclaimation circle outline' />\n        <Message.Content>\n          <Message.Header>\n            Transaction Validation Failure\n          </Message.Header>\n          Transaction was not sent to Blockchain. Check your keys or metadata\n        </Message.Content>\n      </Message>\n    );\n  };\n\n  const txTimeout = () => {\n    return (\n      <Message icon attached=\"bottom\" warning>\n        <Icon name='hourglass outline' />\n        <Message.Content>\n          <Message.Header>\n            Transaction Timeout\n          </Message.Header>\n          ...but your tx was sent.\n          <a href={`${kadenaAPI.explorerURL}/tx/${tx.hash}`}>\n            View transaction in Block Explorer\n          </a>\n        </Message.Content>\n      </Message>\n    );\n  };\n\n\n  //return react JSX\n  return (\n    <div>\n      <Segment raised padded=\"very\">\n        <div style={{ margin: 30 }}>\n          <h1>\n            <a>Welcome to DAO.init</a>\n          </h1>\n\n          <table className=\"ui very basic collapsing celled table\">\n            <thead>\n              <tr>\n              </tr>\n           </thead>\n           <tbody>\n             <tr>\n               <td>\n                 <h4>\n                   Contract Address\n                 </h4>\n               </td>\n               <td>\n                  {kadenaAPI.contractAddress}\n               </td>\n             </tr>\n             <tr>\n               <td>\n                 <h4>\n                   Chain ID\n                 </h4>\n               </td>\n               <td>\n                  {kadenaAPI.meta.chainId}\n               </td>\n             </tr>\n             <tr>\n               <td>\n                 <h4>\n                   Network ID\n                 </h4>\n               </td>\n               <td>\n                  {kadenaAPI.meta.networkId}\n               </td>\n             </tr>\n           </tbody>\n          </table>\n          <h2>\n            Contract State\n          </h2>\n          <RenderInitState initState={initState}/>\n          <h2>\n            Guardians\n          </h2>\n          <RenderGuardians guardians={guardians}/>\n          <h2>\n            Ambassadors\n          </h2>\n          <RenderAmbassadors ambassadors={ambassadors}/>\n          <AddAmbassador guardians={guardians}/>\n        </div>\n      </Segment>\n    </div>\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n        <Router basename={process.env.PUBLIC_URL}>\n          <App />\n        </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/*\n\nBLOCKCHAIN CONFIGURATION FILE\n\n  initalize all data for pact-lang-api kadena blockchain calls\n\n  modify this file to interact with different\n    chains, networks, contracts\n\n  documentation:\n    https://pact-language.readthedocs.io/en/stable/\n\n  pact tutorials:\n    https://pactlang.org/\n\n*/\n\n//chain that contract lives on\nvar chainId = \"0\";\n\n//id of network version\nvar networkId = \"testnet04\";\n\n//network node\nvar node = \"api.testnet.chainweb.com\";\n\n//unique contract name\nvar contractName = \"init\";\n\n//unique gas station contract name\nvar gasStationName = \"memory-wall-gas-station\";\n\n//namespace that precedes contract name\nvar namespace = \"free\";\n\n//api host to send requests\nvar host = `https://${node}/chainweb/0.0/${networkId}/chain/${chainId}/pact`;\n\n//creation time for request\nvar creationTime = () => Math.round(new Date().getTime() / 1000) - 15;\n\n//JSON with all necessary blockchain call data\nvar kadenaAPI = {\n  contractName: contractName,\n  gasStationName: gasStationName,\n  namespace: namespace,\n  contractAddress: `${namespace}.${contractName}`,\n  gasStationAddress: `${namespace}.${gasStationName}`,\n  explorerURL: `https://explorer.chainweb.com/${networkId.slice(0, -2)}`,\n  meta: {\n    networkId: networkId,\n    chainId: chainId,\n    host: host,\n    creationTime: creationTime,\n    //gas price at lowest possible denomination\n    gasPrice: 0.00000000001,\n    //high gas limit for tx\n    gasLimit: 10000,\n    //time a tx lives in mempool since creationTime\n    ttl: 28800,\n    //sender === gas payer of the transaction\n    //  set to our gas station account defined in memory-wall-gas-station.pact\n    sender: \"mw-free-gas\",\n    //nonce here doesnt matter since the tx will never have the same hash\n    nonce: \"some nonce that doesnt matter\",\n  },\n};\nmodule.exports = { kadenaAPI: kadenaAPI, }\n"],"sourceRoot":""}