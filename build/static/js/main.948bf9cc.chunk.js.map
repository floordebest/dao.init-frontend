{"version":3,"sources":["util.js","Guardians.js","Ambassadors.js","KadenaConfig.js","InitState.js","HeaderMenu.js","App.js","serviceWorker.js","index.js","kadena-config.js"],"names":["dashStyleNames2Text","str","split","map","k","replace","RegExp","a","toUpperCase","join","isRootPactValue","val","renderPactValue","toLocaleString","JSON","stringify","toString","PactSingleJsonAsTable","props","json","removeMargin","header","keyFormatter","valFormatter","Table","simple","collapsing","celled","style","Header","Row","HeaderCell","Body","Object","entries","v","Cell","PactJsonListAsTable","keyOrder","Array","isArray","length","keys","console","log","obj","RenderGuardians","guardians","RenderAmbassadors","ambassadors","KadenaConfig","kadenaAPI","getContractState","cmd","Pact","fetch","local","pactCode","contractAddress","meta","lang","mkMeta","sender","chainId","gasPrice","gasLimit","creationTime","ttl","host","res","all","result","data","RenderInitState","initState","HeaderMenu","headerIcon","Icon","name","this","size","menuItems","i","items","error","route","push","Menu","Item","key","index","as","Link","to","active","location","pathname","fixed","inverted","Container","Component","withRouter","Home","MissingPage","App","styled","div","useState","setInitState","setGuardians","setAmbassadors","getInitState","getAmbassadors","getGuardians","useEffect","Fragment","onItemClick","item","Divider","Segment","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","contractName","gasStationName","namespace","gasStationAddress","explorerURL","slice","networkId","Math","round","Date","getTime","nonce","module","exports"],"mappings":"8YAOaA,EAAsB,SAAAC,GAAG,OAAIA,EAAIC,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAEA,EAAEC,QAAQ,IAAIC,OAAO,KAAK,OAAM,SAAAC,GAAC,OAAEA,EAAEC,oBAAgBC,KAAK,MAEpHC,EAAkB,SAACC,GACvB,MAAmB,kBAARA,IACL,UAAWA,GAAO,QAASA,GAAO,YAAaA,GAAO,SAAUA,GAAQ,SAAUA,GAAO,SAAUA,IAW9FC,EAAkB,SAACD,GAC9B,MAAmB,kBAARA,EACL,SAAUA,EACLA,EAAG,KACD,UAAWA,EACbA,EAAG,MACD,QAASA,EACW,kBAAfA,EAAG,IAAuBA,EAAG,IAAUA,EAAG,IAAQE,iBACvD,YAAaF,EACW,kBAAnBA,EAAG,QAA2BA,EAAG,QAAcA,EAAG,QAAYE,iBAErEC,KAAKC,UAAUJ,GAIA,mBAARA,EACTA,EAAIK,WACa,kBAARL,EACTA,EACiB,kBAARA,EACTA,EAAIE,iBAEJC,KAAKC,UAAUJ,IAIbM,EAAwB,SAAxBA,EAAyBC,GACpC,IAAMC,EAAOD,EAAMC,MAAQ,GACrBC,EAAeF,EAAME,eAAgB,EACrCC,EAASH,EAAMG,QAAU,GACzBC,EAAeJ,EAAMI,aAAeJ,EAAMI,aAAe,SAAClB,GAAO,OAAQA,GACzEmB,EAAeL,EAAMK,aAAeL,EAAMK,aAAe,SAACtB,GAAD,OAAS,8BAAOW,EAAgBX,KAC7F,OACE,kBAACuB,EAAA,EAAD,CAAOC,QAAM,EAACC,YAAU,EAACC,QAAM,EAACC,MAAOR,EAAgB,CAAC,OAAU,SAAU,gBAAiB,IAAK,gBAAgB,IAAI,eAAe,KAAQ,IAC3I,kBAACI,EAAA,EAAMK,OAAP,KACE,kBAACL,EAAA,EAAMM,IAAP,KACCT,EAAOlB,KAAI,SAACQ,GACX,OAAO,kBAACa,EAAA,EAAMO,WAAP,KAAmBpB,QAK9B,kBAACa,EAAA,EAAMQ,KAAP,KACGC,OAAOC,QAAQf,GAAMhB,KAAI,YAAY,IAAD,mBAATC,EAAS,KAAP+B,EAAO,KACnC,OACA,kBAACX,EAAA,EAAMM,IAAP,KACE,kBAACN,EAAA,EAAMY,KAAP,KAAY,4BAAKd,EAAalB,KAC5BM,EAAgByB,GAChB,kBAACX,EAAA,EAAMY,KAAP,KAAab,EAAaY,IACX,kBAANA,EACT,kBAAClB,EAAD,CACEE,KAAMgB,EACNb,aAAcA,EACdC,aAAcA,EACdH,cAAc,IACD,oBAANe,EACT,kBAACX,EAAA,EAAMY,KAAP,KAAab,EAAaY,EAAEnB,aAE5B,kBAACQ,EAAA,EAAMY,KAAP,KAAab,EAAaY,WAU7BE,EAAsB,SAAtBA,EAAuBnB,GAClC,IAAMC,EAAOD,EAAMC,MAAQ,GACrBC,EAAeF,EAAME,eAAgB,EACrCC,EAASH,EAAMG,QAAU,GAC3BiB,EAAW,GACXpB,EAAMoB,SACRA,EAAWpB,EAAMoB,SACRC,MAAMC,QAAQtB,EAAMC,OACxBA,EAAKsB,OAAS,IACjBH,EAAWL,OAAOS,KAAKvB,EAAK,KAGhCwB,QAAQC,IAAI,sBAAsBzB,EAAME,EAAQiB,GAChD,IAAMhB,EAAeJ,EAAMI,aAAeJ,EAAMI,aAAe,SAAClB,GAAO,OAAQA,GACzEmB,EAAeL,EAAMK,aAAeL,EAAMK,aAAe,SAACtB,GAAD,OAAS,8BAAOW,EAAgBX,KAC7F,OACE,kBAACuB,EAAA,EAAD,CAAOC,QAAM,EAACC,YAAU,EAACC,QAAM,EAACC,MAAOR,EAAgB,CAAC,OAAU,SAAU,aAAgB,IAAK,aAAe,IAAI,YAAc,KAAQ,IACxI,kBAACI,EAAA,EAAMK,OAAP,KACE,kBAACL,EAAA,EAAMM,IAAP,KACCT,EAAOlB,KAAI,SAACQ,GACX,OAAO,kBAACa,EAAA,EAAMO,WAAP,KAAmBpB,QAK9B,kBAACa,EAAA,EAAMQ,KAAP,KACGb,EAAKhB,KAAI,SAAA0C,GACR,OACE,kBAACrB,EAAA,EAAMM,IAAP,KACEQ,EAASnC,KAAI,SAAAC,GACX,IAAM+B,EAAIU,EAAIzC,GACd,OACEM,EAAgByB,GACd,kBAACX,EAAA,EAAMY,KAAP,KAAab,EAAaY,IACxBI,MAAMC,QAAQL,GAChB,kBAACX,EAAA,EAAMY,KAAP,CAAYR,MAAO,CAAC,OAAU,SAAU,aAAgB,IAAK,aAAe,IAAI,YAAc,IAAK,QAAU,MAC7G,kBAACS,EAAD,CACElB,KAAMgB,EACNb,aAAcA,EACdC,aAAcA,EACdH,cAAc,KAED,kBAANe,EACT,kBAACX,EAAA,EAAMY,KAAP,CAAYR,MAAO,CAAC,OAAU,SAAU,aAAgB,IAAK,aAAe,IAAI,YAAc,IAAK,QAAU,MAC7G,kBAAC,EAAD,CACET,KAAMgB,EACNb,aAAcA,EACdC,aAAcA,EACdH,cAAc,KAED,oBAANe,EACT,kBAACX,EAAA,EAAMY,KAAP,KAAab,EAAaY,EAAEnB,aAE5B,kBAACQ,EAAA,EAAMY,KAAP,KAAab,EAAaY,c,QC3CnCW,EAAkB,SAAC5B,GAC9B,OACE,kBAAC,EAAD,CACEG,OAAQ,CAAC,WAAW,gBAAgB,gBAAgB,gBAAgB,SACpEiB,SAAU,CAAC,IAAI,gBAAgB,gBAAgB,gBAAgB,SAC/DnB,KAAMD,EAAM6B,aCnGLC,EAAoB,SAAC9B,GAChC,OACE,kBAAC,EAAD,CACEG,OAAQ,CAAC,aAAa,SAAS,kBAAkB,SACjDiB,SAAU,CAAC,IAAI,SAAS,kBAAkB,SAC1CnB,KAAMD,EAAM+B,eCNLC,EAAe,WAC1B,OACE,kBAAC,EAAD,CACE/B,KAAMgC,YACN7B,aAAcA,kBCFP8B,EAAgB,uCAAG,WAAOC,GAAP,iBAAA9C,EAAA,sEAEV+C,IAAKC,MAAMC,MAC3B,CACEC,SAAS,IAAD,OAAMN,YAAUO,gBAAhB,YAAmCL,EAAnC,KAERM,KAAML,IAAKM,KAAKC,OACdV,YAAUQ,KAAKG,OACfX,YAAUQ,KAAKI,QACfZ,YAAUQ,KAAKK,SACfb,YAAUQ,KAAKM,SACfd,YAAUQ,KAAKO,eACff,YAAUQ,KAAKQ,MAGnBhB,YAAUQ,KAAKS,MAfW,cAEtBC,EAFsB,OAiBtBC,EAAMD,EAAIE,OAAOC,KAEvB7B,QAAQC,IAAI,mBAAmB0B,GAnBH,kBAoBrBA,GApBqB,2CAAH,sDAuBhBG,EAAkB,SAACvD,GAC9B,OACC,kBAAC,EAAD,CACCC,KAAMD,EAAMwD,UACZrD,OAAQ,CAAC,GAAG,UACZC,aAActB,K,sDC9BZ2E,E,uKAKF,IAHA,IAAMC,EAAa,kBAACC,EAAA,EAAD,CAAMC,KAAMC,KAAK7D,MAAM0D,WAAYI,KAAK,UAEvDC,EAAY,GACPC,EAAI,EAAGA,EAAIH,KAAK7D,MAAMiE,MAAM1C,OAAQyC,IAAK,CAChD,GAAmC,IAA/BH,KAAK7D,MAAMiE,MAAMD,GAAGzC,OAAc,CACpCE,QAAQyC,MAAM,wDACd,MAEF,IAAMN,EAAOC,KAAK7D,MAAMiE,MAAMD,GAAG,GAC3BG,EAAQN,KAAK7D,MAAMiE,MAAMD,GAAG,GAClCD,EAAUK,KACR,kBAACC,EAAA,EAAKC,KAAN,CACEC,IAAK,QAAUP,EACfQ,MAAOR,EACPS,GAAIC,IACJC,GAAIR,EACJhE,OAAc,IAAN6D,EACRY,OAAQT,IAAUN,KAAK7D,MAAM6E,SAASC,UAE/B,IAANd,EAAUN,EAAa,GACvBE,IAKP,OACE,kBAACS,EAAA,EAAD,CAAMU,MAAM,MAAMC,UAAQ,GACxB,kBAACC,EAAA,EAAD,KAAYlB,Q,GA7BKmB,aAyCVC,cAAW1B,G,mJCtB1B,IAAM2B,EAAO,kBAAM,oDACbC,EAAc,kBAAM,kDAiHXC,GA/GCC,IAAOC,IAAV,KAQD,WAAM,MAYkBC,mBAAU,IAZ5B,mBAYTjC,EAZS,KAYEkC,EAZF,OAakBD,mBAAU,IAb5B,mBAaT5D,EAbS,KAaE8D,EAbF,OAcsBF,mBAAU,IAdhC,mBAcT1D,EAdS,KAcI6D,EAdJ,KAgBVC,EAAY,uCAAG,4BAAAxG,EAAA,sEACD6C,EAAiB,cADhB,OACbiB,EADa,OAEnBuC,EAAavC,GAFM,2CAAH,qDAKZ2C,EAAc,uCAAG,4BAAAzG,EAAA,sEACH6C,EAAiB,oBADd,OACfiB,EADe,OAErByC,EAAezC,GAFM,2CAAH,qDAKd4C,EAAY,uCAAG,4BAAA1G,EAAA,sEACD6C,EAAiB,kBADhB,OACbiB,EADa,OAEnBwC,EAAaxC,GAFM,2CAAH,qDAuBlB,OAlBA6C,qBAAU,WACRH,IACAC,IACAC,MACC,IAeD,kBAAC,IAAME,SAAP,KACE,kBAAC,EAAD,CACEC,YAAa,SAAAC,GAAI,OAAI,EAAKD,YAAYC,IACtClC,MAAO,CACL,CAAC,OAAQ,KACT,CAAC,SAAU,iBACX,CAAC,aAAc,cACf,CAAC,YAAa,cACd,CAAC,cAAe,iBAElBP,WAAY,oBAEd,kBAAC0C,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,gBAAgBE,UAAW,kBACnC,kBAAC,EAAD,SACJ,kBAAC,IAAD,CAAOF,KAAK,aAAaE,UAAW,kBAChC,kBAAC,EAAD,CAAiBhD,UAAWA,OAChC,kBAAC,IAAD,CAAO8C,KAAK,aAAaE,UAAW,kBAChC,kBAAC,EAAD,CAAiB3E,UAAWA,OAChC,kBAAC,IAAD,CAAOyE,KAAK,eAAeE,UAAW,kBAClC,kBAAC,EAAD,CAAmBzE,YAAaA,OACpC,kBAAC,IAAD,CAAOyE,UAAWnB,S,cCjGRoB,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,SAAUC,sBAChB,kBAAC,EAAD,OAFJ,KAKEC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACLzC,QAAQyC,MAAMA,EAAMyD,a,gBEvH5B,IAkBIzE,EAAI,kBAZG,2BAYH,yBAfQ,YAeR,kBAlBM,IAkBN,SAMJjB,EAAY,CACd2F,aAhBiB,OAiBjBC,eAdmB,0BAenBC,UAZc,OAadtF,gBAAgB,GAAD,OAbD,OAaC,YAnBE,QAoBjBuF,kBAAkB,GAAD,OAdH,OAcG,YAjBE,2BAkBnBC,YAAY,iCAAD,OA3BG,YA2B0CC,MAAM,GAAI,IAClExF,KAAM,CACJyF,UA7BY,YA8BZrF,QAjCU,IAkCVK,KAAMA,EACNF,aAde,kBAAMmF,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAAQ,IAgB/DxF,SAAU,MAEVC,SAAU,IAEVE,IAAK,MAGLL,OAAQ,cAER2F,MAAO,kCAOXC,EAAOC,QAAU,CAAExG,UAAWA,EAAW7B,aAHpB,SAACrB,GAAD,OACnBA,EAAII,QAAQ,IAAIC,OAAO,SAAS,MAAM,OAAOD,QAAQ,IAAIC,OAAO,SAAS,OAAM,SAAAF,GAAC,OAAIA,EAAEI,qB","file":"static/js/main.948bf9cc.chunk.js","sourcesContent":["// For util functions\nimport React from \"react\";\nimport {\n  Table\n} from \"semantic-ui-react\";\n//config file for blockchain calls\n\nexport const dashStyleNames2Text = str => str.split(\"-\").map(k=>k.replace(new RegExp(\"^.\",\"gm\"),a=>a.toUpperCase())).join(' ');\n\nconst isRootPactValue = (val) => {\n  if (typeof val === 'object' ) {\n    if ('timep' in val || 'int' in val || 'decimal' in val || 'time' in val || ('pred' in val && 'keys' in val)) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return true;\n  }\n};\n\n\nexport const renderPactValue = (val) => {\n  if (typeof val === 'object' ) {\n    if ('time' in val) {\n      return val['time'];\n    } else if ('timep' in val) {\n      return val['timep'];\n    } else if ('int' in val) {\n      return typeof val['int'] === 'string' ? val['int'] : val['int'].toLocaleString();\n    } else if ('decimal' in val) {\n      return typeof val['decimal'] === 'string' ? val['decimal'] : val['decimal'].toLocaleString();\n    } else if ('pred' in val && 'keys' in val) {\n      return JSON.stringify(val);\n    } else {\n      return JSON.stringify(val);\n    }\n  } else if (typeof val === 'boolean') {\n    return val.toString();\n  } else if (typeof val === 'string') {\n    return val;\n  } else if (typeof val === 'number'){\n    return val.toLocaleString()\n  } else {\n    return JSON.stringify(val);\n  }\n};\n\nexport const PactSingleJsonAsTable = (props) => {\n  const json = props.json || {};\n  const removeMargin = props.removeMargin || false;\n  const header = props.header || [];\n  const keyFormatter = props.keyFormatter ? props.keyFormatter : (k) => {return (k)};\n  const valFormatter = props.valFormatter ? props.valFormatter : (str) => <code>{renderPactValue(str)}</code>\n    return (\n      <Table simple collapsing celled style={removeMargin ? ({'margin': '0 auto', 'border-radius': '0', 'border-bottom':'0','border-right':'0'}) : {}}>\n        <Table.Header>\n          <Table.Row>\n          {header.map((val) => {\n            return <Table.HeaderCell>{val}</Table.HeaderCell>;\n          })}\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {Object.entries(json).map(([k,v]) => {\n            return (\n            <Table.Row>\n              <Table.Cell><h4>{keyFormatter(k)}</h4></Table.Cell>\n              { isRootPactValue(v) ? (\n                <Table.Cell>{valFormatter(v)}</Table.Cell>\n              ) : typeof v === \"object\" ? (\n                <PactSingleJsonAsTable\n                  json={v}\n                  keyFormatter={keyFormatter}\n                  valFormatter={valFormatter}\n                  removeMargin={true}/>\n              ) : typeof v === \"function\" ? (\n                <Table.Cell>{valFormatter(v.toString())}</Table.Cell>\n              ) : (\n                <Table.Cell>{valFormatter(v)}</Table.Cell>\n              )}\n            </Table.Row>\n            )\n          })}\n        </Table.Body>\n      </Table>\n    )\n};\n\nexport const PactJsonListAsTable = (props) => {\n  const json = props.json || {};\n  const removeMargin = props.removeMargin || false;\n  const header = props.header || [];\n  let keyOrder = [];\n  if (props.keyOrder) {\n    keyOrder = props.keyOrder;\n  } else if (Array.isArray(props.json)) {\n    if ( json.length > 0 ) {\n      keyOrder = Object.keys(json[0]);\n    }\n  }\n  console.log(\"PactJsonListAsTable\",json, header, keyOrder);\n  const keyFormatter = props.keyFormatter ? props.keyFormatter : (k) => {return (k)};\n  const valFormatter = props.valFormatter ? props.valFormatter : (str) => <code>{renderPactValue(str)}</code>\n    return (\n      <Table simple collapsing celled style={removeMargin ? ({'margin': '0 auto', 'borderRadius': '0', 'borderBottom':'0','borderRight':'0'}) : {}}>\n        <Table.Header>\n          <Table.Row>\n          {header.map((val) => {\n            return <Table.HeaderCell>{val}</Table.HeaderCell>;\n          })}\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {json.map(obj => {\n            return (\n              <Table.Row>\n              { keyOrder.map(k => {\n                  const v = obj[k];\n                  return (\n                    isRootPactValue(v) ? (\n                      <Table.Cell>{valFormatter(v)}</Table.Cell>\n                    ) : Array.isArray(v) ? (\n                      <Table.Cell style={{'margin': '0 auto', 'borderRadius': '0', 'borderBottom':'0','borderRight':'0', 'padding':'0'}}>\n                      <PactJsonListAsTable\n                        json={v}\n                        keyFormatter={keyFormatter}\n                        valFormatter={valFormatter}\n                        removeMargin={true}/>\n                      </Table.Cell>\n                    ) : typeof v === \"object\" ? (\n                      <Table.Cell style={{'margin': '0 auto', 'borderRadius': '0', 'borderBottom':'0','borderRight':'0', 'padding':'0'}}>\n                      <PactSingleJsonAsTable\n                        json={v}\n                        keyFormatter={keyFormatter}\n                        valFormatter={valFormatter}\n                        removeMargin={true}/>\n                      </Table.Cell>\n                    ) : typeof v === \"function\" ? (\n                      <Table.Cell>{valFormatter(v.toString())}</Table.Cell>\n                    ) : (\n                      <Table.Cell>{valFormatter(v)}</Table.Cell>\n                    )\n                  )\n                }\n            )}\n            </Table.Row>\n          )\n        })}\n      </Table.Body>\n    </Table>\n)}\n//           })}\n//             return (\n//             <Table.Row>\n//               <Table.Cell><h4>{keyFormatter(k,v)}</h4></Table.Cell>\n//               { isRootPactValue(v) ? (\n//                 <Table.Cell>{valFormatter(v)}</Table.Cell>\n//               ) : typeof v === \"object\" ? (\n//                 <PactSingleJsonAsTable\n//                   json={v}\n//                   keyFormatter={keyFormatter}\n//                   valFormatter={valFormatter}\n//                   removeMargin={true}/>\n//               ) : typeof v === \"function\" ? (\n//                 <Table.Cell>{valFormatter(v.toString())}</Table.Cell>\n//               ) : (\n//                 <Table.Cell>{valFormatter(v)}</Table.Cell>\n//               )}\n//             </Table.Row>\n//             )\n//           })}\n//         </Table.Body>\n//       </Table>\n//     )\n// };\n","//basic React api imports\nimport React, { useState, } from \"react\";\n//semantic ui for styling\nimport {\n  Form,\n  Input,\n  Message,\n  Button,\n} from \"semantic-ui-react\";\n//pact-lang-api for blockchain calls\nimport Pact from \"pact-lang-api\";\n//config file for blockchain calls\nimport { kadenaAPI } from \"./kadena-config.js\";\nimport {\n  PactJsonListAsTable,\n } from \"./util.js\";\nimport { PactTxStatus } from \"./PactTxStatus.js\"\n\nconst sendGuardianCmd = async (\n  setTx,\n  setTxStatus,\n  setTxRes,\n  refresh,\n  user, cmd, envData={}\n) => {\n    try {\n      //creates transaction to send to wallet\n      const toSign = {\n          pactCode: cmd,\n          caps: Pact.lang.mkCap(\"Guadian Cap\"\n                           , \"Authenticates that your a guardian\"\n                           , `${kadenaAPI.contractAddress}.GUARDIAN`\n                           , [user]),\n          gasLimit: kadenaAPI.meta.gasLimit,\n          chainId: kadenaAPI.meta.chainId,\n          ttl: kadenaAPI.meta.ttl,\n          sender: user,\n          envData: envData\n      }\n      console.log(\"toSign\", toSign)\n      //sends transaction to wallet to sign and awaits signed transaction\n      const signed = await Pact.wallet.sign(toSign)\n      console.log(\"signed\", signed)\n      setTx(signed)\n      //sends signed transaction to blockchain\n      const txReqKeys = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n      console.log(\"txReqKeys\", txReqKeys)\n      //set html to wait for transaction response\n      //set state to wait for transaction response\n      setTxStatus('pending')\n      try {\n        //listens to response to transaction sent\n        //  note method will timeout in two minutes\n        //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n        let retries = 8;\n        let res = {};\n        while (retries > 0) {\n          //sleep the polling\n          await new Promise(r => setTimeout(r, 15000));\n          res = await Pact.fetch.poll(txReqKeys, kadenaAPI.meta.host);\n          try {\n            if (res[signed.hash].result.status) {\n              retries = -1;\n            } else {\n              retries = retries - 1;\n            }\n          } catch(e) {\n              retries = retries - 1;\n          }\n        };\n        //keep transaction response in local state\n        setTxRes(res)\n        if (res[signed.hash].result.status === \"success\"){\n          console.log(\"tx status set to success\");\n          //set state for transaction success\n          setTxStatus('success');\n          refresh();\n        } else if (retries === 0) {\n          console.log(\"tx status set to timeout\");\n          setTxStatus('timeout');\n          refresh();\n        } else {\n          console.log(\"tx status set to failure\");\n          //set state for transaction failure\n          setTxStatus('failure');\n        }\n      } catch(e) {\n        // TODO: use break in the while loop to capture if timeout occured\n        console.log(\"tx api failure\",e);\n        setTxRes(e);\n        setTxStatus('failure');\n      }\n    } catch(e) {\n      console.log(e);\n      console.log(\"tx status set to validation error\");\n      //set state for transaction construction error\n      setTxStatus('validation-error');\n    }\n};\n\nexport const RenderGuardians = (props) => {\n  return (\n    <PactJsonListAsTable\n      header={[\"Guardian\",\"Committed KDA\",\"Approved Hash\",\"Approval Date\",\"Guard\"]}\n      keyOrder={[\"k\",\"committed-kda\",\"approved-hash\",\"approved-date\",\"guard\"]}\n      json={props.guardians}\n    />\n)};\n\nexport const RegisterAmbassador = (props) => {\n  const [grd, setGrd] = useState( \"\" );\n  const [newAmb, setNewAmb] = useState( \"\" );\n  const [ambGrd, setAmbGrd] = useState( \"\" );\n  const [txStatus, setTxStatus] = useState(\"\");\n  const [tx, setTx] = useState( {} );\n  const [txRes, setTxRes] = useState( {} );\n\n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n      console.log(grd,newAmb,ambGrd);\n      sendGuardianCmd(setTx,setTxStatus,setTxRes,props.refresh\n        ,grd\n        ,`(${kadenaAPI.contractAddress}.register-ambassador \"${grd}\" \"${newAmb}\" (read-keyset 'ks))`\n        ,{ks: JSON.parse(ambGrd)}\n        )\n      };\n\n  return (\n    <div>\n      <Message attached header=\"Add Ambassador\"/>\n      <Form onSubmit={evt => handleSubmit(evt)} className=\"attached fluid segment\">\n        <Form.Select\n          label=\"Select Guardian\"\n          required\n          options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n          onChange={(e,d) => {setGrd(d.value)}}\n          />\n        <Form.Field required>\n          <label>Ambassador Account Name</label>\n          <Input required\n            value={newAmb}\n            onChange={e => setNewAmb(e.target.value)}/>\n        </Form.Field>\n        <Form.TextArea required\n          label=\"Ambassador Account Guard\"\n          placeholder={JSON.stringify({\"pred\":\"keys-all\",\"keys\":[\"8c59a322800b3650f9fc5b6742aa845bc1c35c2625dabfe5a9e9a4cada32c543\"]},undefined,2)}\n          value={ambGrd}\n          onChange={e => setAmbGrd(e.target.value)}\n          />\n        <Button color='blue' type='submit'>Submit</Button>\n      </Form>\n      <PactTxStatus tx={tx} txRes={txRes} txStatus={txStatus}/>\n    </div>\n\n  );\n};\n\nexport const DeactivateAmbassador = (props) => {\n  const [grd, setGrd] = useState( \"\" );\n  const [newAmb, setNewAmb] = useState( \"\" );\n  const [txStatus, setTxStatus] = useState(\"\");\n  const [tx, setTx] = useState( {} );\n  const [txRes, setTxRes] = useState( {} );\n\n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n      // console.log(grd,newAmb);\n      sendGuardianCmd(setTx,setTxStatus,setTxRes,props.refresh\n        ,grd\n        ,`(${kadenaAPI.contractAddress}.deactivate-ambassador \"${grd}\" \"${newAmb}\")`\n        )\n      };\n\n  return (\n    <div>\n      <Message attached header=\"Deactivate Ambassador\"/>\n      <Form onSubmit={(evt)=>handleSubmit(evt)} className=\"attached fluid segment\">\n        <Form.Select\n          label=\"Select Guardian\"\n          required\n          options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n          onChange={(e,d) => {setGrd(d.value)}}\n          />\n        <Form.Select\n          label=\"Select Ambassador\"\n          required\n          options={props.ambassadors.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n          onChange={e => setNewAmb(e.target.value)}/>\n        <Button color='blue' type='submit'>Submit</Button>\n      </Form>\n      <PactTxStatus tx={tx} txRes={txRes} txStatus={txStatus}/>\n    </div>\n\n  );\n};\n\nexport const ReactivateAmbassador = (props) => {\n  const [grd, setGrd] = useState( \"\" );\n  const [amb, setAmb] = useState( \"\" );\n  const [txStatus, setTxStatus] = useState(\"\");\n  const [tx, setTx] = useState( {} );\n  const [txRes, setTxRes] = useState( {} );\n\n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n      // console.log(grd,newAmb);\n      sendGuardianCmd(setTx,setTxStatus,setTxRes,props.refresh\n        ,grd\n        ,`(${kadenaAPI.contractAddress}.reactivate-ambassador \"${grd}\" \"${amb}\")`\n        )\n      };\n\n  return (\n    <div>\n      <Message attached header=\"Reactivate Ambassador\"/>\n      <Form onSubmit={evt => handleSubmit(evt)} className=\"attached fluid segment\">\n        <Form.Select\n          label=\"Select Guardian\"\n          required\n          options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n          onChange={(e,d) => {setGrd(d.value)}}\n          />\n        <Form.Select\n          label=\"Select Ambassador\"\n          required\n          options={props.ambassadors.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n          onChange={(e,d) => setAmb(d.value)}/>\n        <Button color='blue' type='submit'>Submit</Button>\n      </Form>\n      <PactTxStatus tx={tx} txRes={txRes} txStatus={txStatus}/>\n    </div>\n\n  );\n}\n\nexport const RotateGuardian = (props) => {\n  const [grd, setGrd] = useState( \"\" );\n  const [ks, setKs] = useState( \"\" );\n  const [txStatus, setTxStatus] = useState( \"\" );\n  const [tx, setTx] = useState( {} );\n  const [txRes, setTxRes] = useState( {} );\n\n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n      // console.log(grd,newAmb);\n      sendGuardianCmd(setTx,setTxStatus,setTxRes,props.refresh\n        ,grd\n        ,`(${kadenaAPI.contractAddress}.reactivate-ambassador \"${grd}\" (read-keyset 'ks))`\n        ,{ks: JSON.parse(ks)})\n      };\n\n  return (\n    <div>\n      <Message attached header=\"Rotate Guardian\"/>\n      <Form onSubmit={evt => handleSubmit(evt)} className=\"attached fluid segment\">\n        <Form.Select\n          label=\"Select Guardian\"\n          required\n          options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n          onChange={(e,d) => {setGrd(d.value)}}\n          />\n        <Form.TextArea required\n          label=\"Enter new KeySet\"\n          placeholder={JSON.stringify({\"pred\":\"keys-all\",\"keys\":[\"8c59a322800b3650f9fc5b6742aa845bc1c35c2625dabfe5a9e9a4cada32c543\"]},undefined,2)}\n          value={ks}\n          onChange={e => setKs(e.target.value)}\n          />\n        <Button color='blue' type='submit'>Submit</Button>\n      </Form>\n      <PactTxStatus tx={tx} txRes={txRes} txStatus={txStatus}/>\n    </div>\n\n  );\n}\n","//basic React api imports\nimport React from \"react\";\n//config file for blockchain calls\nimport { PactJsonListAsTable } from \"./util.js\";\n\n\nexport const RenderAmbassadors = (props) => {\n  return (\n    <PactJsonListAsTable\n      header={[\"Ambassador\",\"Active\",\"Voted to Freeze\",\"Guard\"]}\n      keyOrder={[\"k\",\"active\",\"voted-to-freeze\",\"guard\"]}\n      json={props.ambassadors}\n    />\n)};\n","//basic React api imports\nimport React from \"react\";\nimport { kadenaAPI, keyFormatter } from \"./kadena-config.js\";\nimport { PactSingleJsonAsTable } from \"./util.js\";\n\nexport const KadenaConfig = () => {\n  return (\n    <PactSingleJsonAsTable\n      json={kadenaAPI}\n      keyFormatter={keyFormatter}\n      />\n  )\n};\n","//basic React api imports\nimport React from \"react\";\n//config file for blockchain calls\nimport Pact from \"pact-lang-api\";\nimport { kadenaAPI } from \"./kadena-config.js\";\nimport { PactSingleJsonAsTable, dashStyleNames2Text } from \"./util.js\";\n\nexport const getContractState = async (cmd) => {\n  //calling get-all() function from smart contract\n    const res = await Pact.fetch.local(\n      {\n        pactCode: `(${kadenaAPI.contractAddress}.${cmd})`,\n        //pact-lang-api function to construct transaction meta data\n        meta: Pact.lang.mkMeta(\n          kadenaAPI.meta.sender,\n          kadenaAPI.meta.chainId,\n          kadenaAPI.meta.gasPrice,\n          kadenaAPI.meta.gasLimit,\n          kadenaAPI.meta.creationTime(),\n          kadenaAPI.meta.ttl\n        ),\n      },\n      kadenaAPI.meta.host\n    );\n    const all = res.result.data;\n    //sorts memories by least recent\n    console.log(\"local query data\",all);\n    return(all);\n};\n\nexport const RenderInitState = (props) => {\n  return (\n   <PactSingleJsonAsTable\n    json={props.initState}\n    header={[\"\",\"Status\"]}\n    keyFormatter={dashStyleNames2Text}\n    />\n  )\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Menu, Container, Icon } from \"semantic-ui-react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nclass HeaderMenu extends Component {\n  render() {\n    const headerIcon = <Icon name={this.props.headerIcon} size=\"large\" />;\n\n    let menuItems = [];\n    for (let i = 0; i < this.props.items.length; i++) {\n      if (this.props.items[i].length !== 2) {\n        console.error('HeaderMenu: items format should be [\"name\", \"route\"]');\n        break;\n      }\n      const name = this.props.items[i][0];\n      const route = this.props.items[i][1];\n      menuItems.push(\n        <Menu.Item\n          key={\"item-\" + i}\n          index={i}\n          as={Link}\n          to={route}\n          header={i === 0}\n          active={route === this.props.location.pathname}\n        >\n          {i === 0 ? headerIcon : \"\"}\n          {name}\n        </Menu.Item>\n      );\n    }\n\n    return (\n      <Menu fixed=\"top\" inverted>\n        <Container>{menuItems}</Container>\n      </Menu>\n    );\n  }\n}\n\nHeaderMenu.propTypes = {\n  onItemClick: PropTypes.func.isRequired,\n  headerIcon: PropTypes.string.isRequired,\n  items: PropTypes.arrayOf(PropTypes.array.isRequired).isRequired\n};\n\nexport default withRouter(HeaderMenu);\n","//basic React api imports\nimport React, { useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n//semantic ui for styling\nimport {\n  Container,\n  Divider,\n  Segment,\n} from \"semantic-ui-react\";\nimport styled from \"styled-components\";\n\n//config file for blockchain calls\nimport  {\n  RenderGuardians,\n  RegisterAmbassador,\n  DeactivateAmbassador,\n  ReactivateAmbassador,\n  RotateGuardian,\n} from \"./Guardians.js\";\nimport { RenderAmbassadors } from \"./Ambassadors.js\";\nimport { KadenaConfig } from \"./KadenaConfig.js\";\nimport { RenderInitState, getContractState } from \"./InitState.js\";\nimport HeaderMenu from \"./HeaderMenu\";\n\nconst Home = () => <h1>Welcome to dao.init</h1>;\nconst MissingPage = () => <h1>URL doesn't exist</h1>;\n\nconst Wrapper = styled.div`\n  display: flex;\n  min-height: 100vh;\n  flex-direction: column;\n`;\n\n\n\nconst App = () => {\n  /*\n\n    REACT COMPONENT SETUP\n\n      we will make use of standard react apis\n\n      useState -> page state management\n      useEffect -> fetch existing memories on page load\n\n  */\n\n  const [initState, setInitState] = useState( {} );\n  const [guardians, setGuardians] = useState( [] );\n  const [ambassadors, setAmbassadors] = useState( [] );\n\n  const getInitState = async () => {\n    const res = await getContractState(\"view-state\");\n    setInitState(res);\n  };\n\n  const getAmbassadors = async () => {\n    const res = await getContractState(\"view-ambassadors\");\n    setAmbassadors(res);\n  };\n\n  const getGuardians = async () => {\n    const res = await getContractState(\"view-guardians\");\n    setGuardians(res);\n  };\n\n  useEffect(() => {\n    getInitState();\n    getAmbassadors();\n    getGuardians();\n  }, []);\n\n  /*\n\n    BLOCKCHAIN TRANSACTIONS\n\n      use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n\n      all transaction setup is ./kadena-config.js\n\n  */\n\n\n  return (\n    <React.Fragment>\n      <HeaderMenu\n        onItemClick={item => this.onItemClick(item)}\n        items={[\n          [\"Home\", \"/\"],\n          [\"Config\", \"/KadenaConfig\"],\n          [\"Init State\", \"/InitState\"],\n          [\"Guardians\", \"/Guardians\"],\n          [\"Ambassadors\", \"/Ambassadors\"],\n        ]}\n        headerIcon={\"compass outline\"}\n      />\n      <Divider />\n      <Segment>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/KadenaConfig\" component={() =>\n              <KadenaConfig/>} />\n          <Route path=\"/InitState\" component={() =>\n              <RenderInitState initState={initState}/>} />\n          <Route path=\"/Guardians\" component={() =>\n              <RenderGuardians guardians={guardians}/>} />\n          <Route path=\"/Ambassadors\" component={() =>\n              <RenderAmbassadors ambassadors={ambassadors}/>} />\n          <Route component={MissingPage} />\n        </Switch>\n      </Segment>\n    </React.Fragment>\n  );\n};\n\n\n    //   <h1>\n    //     <a>Welcome to DAO.init</a>\n    //   </h1>\n    //\n    //   <RegisterAmbassador\n    //     guardians={guardians}\n    //     refresh={() => getAmbassadors()}/>\n    //   <ReactivateAmbassador\n    //     guardians={guardians}\n    //     ambassadors={ambassadors}\n    //     refresh={() => getAmbassadors()}/>\n    //   <DeactivateAmbassador\n    //     guardians={guardians}\n    //     ambassadors={ambassadors}\n    //     refresh={() => getAmbassadors()}/>\n    //   <RotateGuardian\n    //     guardians={guardians}\n    //     refresh={() => getGuardians()}/>\n    // </React.Fragment>\n    //\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>,\n  </React.StrictMode>\n  , document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/*\n\nBLOCKCHAIN CONFIGURATION FILE\n\n  initalize all data for pact-lang-api kadena blockchain calls\n\n  modify this file to interact with different\n    chains, networks, contracts\n\n  documentation:\n    https://pact-language.readthedocs.io/en/stable/\n\n  pact tutorials:\n    https://pactlang.org/\n\n*/\n\n//chain that contract lives on\nvar chainId = \"0\";\n\n//id of network version\nvar networkId = \"testnet04\";\n\n//network node\nvar node = \"api.testnet.chainweb.com\";\n\n//unique contract name\nvar contractName = \"init\";\n\n//unique gas station contract name\nvar gasStationName = \"memory-wall-gas-station\";\n\n//namespace that precedes contract name\nvar namespace = \"free\";\n\n//api host to send requests\nvar host = `https://${node}/chainweb/0.0/${networkId}/chain/${chainId}/pact`;\n\n//creation time for request\nvar creationTime = () => Math.round(new Date().getTime() / 1000) - 15;\n\n//JSON with all necessary blockchain call data\nvar kadenaAPI = {\n  contractName: contractName,\n  gasStationName: gasStationName,\n  namespace: namespace,\n  contractAddress: `${namespace}.${contractName}`,\n  gasStationAddress: `${namespace}.${gasStationName}`,\n  explorerURL: `https://explorer.chainweb.com/${networkId.slice(0, -2)}`,\n  meta: {\n    networkId: networkId,\n    chainId: chainId,\n    host: host,\n    creationTime: creationTime,\n    //gas price at lowest possible denomination\n    gasPrice: 0.00000000001,\n    //high gas limit for tx\n    gasLimit: 10000,\n    //time a tx lives in mempool since creationTime\n    ttl: 28800,\n    //sender === gas payer of the transaction\n    //  set to our gas station account defined in memory-wall-gas-station.pact\n    sender: \"mw-free-gas\",\n    //nonce here doesnt matter since the tx will never have the same hash\n    nonce: \"some nonce that doesnt matter\",\n  },\n};\n\nconst keyFormatter = (str) =>\n  str.replace(new RegExp(\"[A-Z]+\",\"gm\"),\" $&\").replace(new RegExp(\"^[a-z]\",\"gm\"),k => k.toUpperCase());\n\nmodule.exports = { kadenaAPI: kadenaAPI, keyFormatter: keyFormatter }\n"],"sourceRoot":""}