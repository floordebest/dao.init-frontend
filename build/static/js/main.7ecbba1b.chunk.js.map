{"version":3,"sources":["util.js","PactTxStatus.js","Guardians.js","Ambassadors.js","KadenaConfig.js","InitState.js","App.js","serviceWorker.js","index.js","kadena-config.js"],"names":["dashStyleNames2Text","str","split","map","k","replace","RegExp","a","toUpperCase","join","renderPactValue","val","toFixed","JSON","stringify","undefined","toString","PactSingleJsonAsTable","props","json","removeMargin","header","keyFormatter","valFormatter","Table","simple","collapsing","celled","style","Header","Row","HeaderCell","Body","Object","entries","v","Cell","PactTxStatus","useState","setHideTx","tx","txRes","res","txStatus","key","hash","txPending","txSuccess","txFailure","txTimeout","txValidationError","Message","icon","attached","info","onDismiss","Icon","name","loading","Content","href","kadenaAPI","explorerURL","error","warning","sendGuardianCmd","user","cmd","envData","setTx","setTxStatus","setTxRes","toSign","pactCode","caps","Pact","lang","mkCap","contractAddress","gasLimit","meta","chainId","ttl","sender","console","log","wallet","sign","signed","sendSigned","host","txReqKeys","retries","Promise","r","setTimeout","fetch","poll","result","status","e","RenderGuardians","className","guardians","g","RegisterAmbassador","grd","setGrd","newAmb","setNewAmb","ambGrd","setAmbGrd","Form","onSubmit","evt","preventDefault","ks","parse","Dropdown","fluid","search","selection","placeholder","required","options","value","text","onChange","d","Field","target","TextArea","label","Button","color","type","RenderAmbassadors","ambassadors","KadenaConfig","getContractState","local","mkMeta","gasPrice","creationTime","all","data","RenderInitState","initState","App","setInitState","setGuardians","setAmbassadors","getInitState","getAmbassadors","getGuardians","useEffect","Segment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","contractName","gasStationName","namespace","gasStationAddress","slice","networkId","Math","round","Date","getTime","nonce","module","exports"],"mappings":"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","file":"static/js/main.7ecbba1b.chunk.js","sourcesContent":["// For util functions\nimport React from \"react\";\nimport {\n  Table\n} from \"semantic-ui-react\";\n//config file for blockchain calls\nimport Pact from \"pact-lang-api\";\nimport { kadenaAPI, keyFormatter } from \"./kadena-config.js\";\n\nconst stringifyHelper = (k,val) => {\n  return (\n    typeof val === \"number\" ? val.toFixed() : val\n  );\n}\n\nexport const dashStyleNames2Text = str => str.split(\"-\").map(k=>k.replace(new RegExp(\"^.\",\"gm\"),a=>a.toUpperCase())).join(' ');\n\nconst pactStringify = (json) => JSON.stringify(json, (k,v) => renderPactValue(v), 2);\n\nconst isRootPactValue = (val) => {\n  if (typeof val === 'object' ) {\n    if ('timep' in val || 'int' in val || 'decimal' in val || 'time' in val) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return true;\n  }\n};\n\n\nexport const renderPactValue = (val) => {\n  if (typeof val === 'object' ) {\n    if ('time' in val) {\n      return val['time'];\n    } else if ('timep' in val) {\n      return val['timep'];\n    } else if ('int' in val) {\n      return typeof val['int'] === 'string' ? val['int'] : val['int'].toFixed();\n    } else if ('decimal' in val) {\n      return typeof val['decimal'] === 'string' ? val['decimal'] : val['decimal'].toFixed();\n    } else {\n      return JSON.stringify(val, undefined, 2);\n    }\n  } else if (typeof val === 'boolean') {\n    return val.toString();\n  } else if (typeof val === 'string') {\n    return val;\n  } else if (typeof val === 'number'){\n    return val.toFixed()\n  } else {\n    return JSON.stringify(val, undefined, 2);\n  }\n};\n\nexport const PactSingleJsonAsTable = (props) => {\n  const json = props.json || {};\n  const removeMargin = props.removeMargin || false;\n  const header = props.header || [];\n  const keyFormatter = props.keyFormatter ? props.keyFormatter : (k) => {return (k)};\n  const valFormatter = props.valFormatter ? props.valFormatter : (str) => <code>{renderPactValue(str)}</code>\n    return (\n      <Table simple collapsing celled style={removeMargin ? ({'margin': '0 auto', 'border-radius': '0'}) : {}}>\n        <Table.Header>\n          <Table.Row>\n          {header.map((val) => {\n            return <Table.HeaderCell>{val}</Table.HeaderCell>;\n          })}\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {Object.entries(json).map(([k,v]) => {\n            return (\n            <Table.Row>\n              <Table.Cell><h4>{keyFormatter(k)}</h4></Table.Cell>\n              { isRootPactValue(v) ? (\n                <Table.Cell>{valFormatter(v)}</Table.Cell>\n              ) : typeof v === \"object\" ? (\n                <PactSingleJsonAsTable\n                  json={v}\n                  keyFormatter={keyFormatter}\n                  valFormatter={valFormatter}\n                  removeMargin={true}/>\n              ) : typeof v === \"function\" ? (\n                <Table.Cell>{valFormatter(v.toString())}</Table.Cell>\n              ) : (\n                <Table.Cell>{valFormatter(v)}</Table.Cell>\n              )}\n            </Table.Row>\n            )\n          })}\n        </Table.Body>\n      </Table>\n    )\n};\n","//basic React api imports\nimport React, { useState } from \"react\";\nimport {\n  Segment,\n  Input,\n  Form,\n  Button,\n  Select,\n  Feed,\n  Dropdown,\n  Icon,\n  Message,\n  Loader,\n} from \"semantic-ui-react\";\nimport Pact from \"pact-lang-api\";\n\nimport { kadenaAPI } from \"./kadena-config.js\";\n\nexport const PactTxStatus = (props) => {\n  // TODO: make these msgs hideable\n  const [hideTx,setHideTx] = useState( false );\n  const tx = props.tx;\n  const txRes = props.res;\n  const txStatus = props.txStatus;\n\n  return (\n    <div key={tx.hash}>\n    { txStatus === \"pending\" ? (\n      txPending(tx,setHideTx)\n    ) : txStatus === \"success\" ? (\n      txSuccess(tx,setHideTx)\n    ) : txStatus === \"failure\" ? (\n      txFailure(tx,txRes,setHideTx)\n    ) : txStatus === \"timeout\" ? (\n      txTimeout(tx,setHideTx)\n    ) : txStatus === \"validation-error\" ? (\n      txValidationError(tx,txRes,setHideTx)\n    ) : (\n      <div />\n    )}\n    </div>\n  )\n\n}\n\nconst txPending = (tx, setHideTx) => {\n  return (\n    <Message icon attached=\"bottom\" info onDismiss={setHideTx(true)}>\n      <Icon name='circle notched' loading />\n      <Message.Content>\n        <Message.Header>\n          Transaction Sent\n        </Message.Header>\n        <p>Awaiting Confirmation</p>\n        <a href={`${kadenaAPI.explorerURL}/tx/${tx.hash}`}>\n          View transaction in Block Explorer\n        </a>\n      </Message.Content>\n    </Message>\n  );\n};\nconst txSuccess = (tx, setHideTx) => {\n  return (\n    <Message icon attached=\"bottom\" info onDismiss={setHideTx(true)}>\n      <Icon name='check square outline' />\n      <Message.Content>\n        <Message.Header>\n          Transaction Confirmed\n        </Message.Header>\n        <a href={`${kadenaAPI.explorerURL}/tx/${tx.hash}`}>\n          View transaction in Block Explorer\n        </a>\n      </Message.Content>\n    </Message>\n  );\n};\n\nconst txFailure = (tx,txRes, setHideTx) => {\n  return (\n    <Message icon attached=\"bottom\" error onDismiss={setHideTx(true)}>\n      <Icon name='exclamation' />\n      <Message.Content>\n        <Message.Header>\n          Transaction Failure\n        </Message.Header>\n        <p>{JSON.stringify(txRes,undefined,2)}</p>\n        <a href={`${kadenaAPI.explorerURL}/tx/${tx.hash}`}>\n          View transaction in Block Explorer\n        </a>\n      </Message.Content>\n    </Message>\n  );\n};\n\nconst txValidationError = (tx, txRes, setHideTx) => {\n  return (\n    <Message icon attached=\"bottom\" error onDismiss={setHideTx(true)}>\n      <Icon name='exclamation' />\n      <Message.Content>\n        <Message.Header>\n          Transaction Validation Failure\n        </Message.Header>\n        Transaction was not sent to Blockchain. Check your keys or metadata\n      </Message.Content>\n    </Message>\n  );\n};\n\nconst txTimeout = (tx, setHideTx) => {\n  return (\n    <Message icon attached=\"bottom\" warning onDismiss={setHideTx(true)}>\n      <Icon name='hourglass outline' />\n      <Message.Content>\n        <Message.Header>\n          Transaction Timeout\n        </Message.Header>\n        ...but your tx was sent.\n        <a href={`${kadenaAPI.explorerURL}/tx/${tx.hash}`}>\n          View transaction in Block Explorer\n        </a>\n      </Message.Content>\n    </Message>\n  );\n};\n","//basic React api imports\nimport React, { useState } from \"react\";\n//semantic ui for styling\nimport {\n  Form,\n  Dropdown,\n  Icon,\n  Message,\n  Button,\n} from \"semantic-ui-react\";\n//pact-lang-api for blockchain calls\nimport Pact from \"pact-lang-api\";\n//config file for blockchain calls\nimport { kadenaAPI } from \"./kadena-config.js\";\nimport { renderPactValue } from \"./util.js\";\nimport { PactTxStatus } from \"./PactTxStatus.js\"\n\nconst sendGuardianCmd = async (user, cmd, envData, setTx, setTxStatus, setTxRes) => {\n    try {\n      //creates transaction to send to wallet\n      const toSign = {\n          pactCode: cmd,\n          caps: Pact.lang.mkCap(\"Guadian Cap\"\n                           , \"Authenticates that your a guardian\"\n                           , `${kadenaAPI.contractAddress}.GUARDIAN`\n                           , [user]),\n          gasLimit: kadenaAPI.meta.gasLimit,\n          chainId: kadenaAPI.meta.chainId,\n          ttl: kadenaAPI.meta.ttl,\n          sender: user,\n          envData: envData || {}\n      }\n      console.log(\"toSign\", toSign)\n      //sends transaction to wallet to sign and awaits signed transaction\n      const signed = await Pact.wallet.sign(toSign)\n      console.log(\"signed\", signed)\n      setTx(signed)\n      //sends signed transaction to blockchain\n      const txReqKeys = await Pact.wallet.sendSigned(signed, kadenaAPI.meta.host)\n      console.log(\"txReqKeys\", txReqKeys)\n      //set html to wait for transaction response\n      //set state to wait for transaction response\n      setTxStatus('pending')\n      try {\n        //listens to response to transaction sent\n        //  note method will timeout in two minutes\n        //    for lower level implementations checkout out Pact.fetch.poll() in pact-lang-api\n        let retries = 8;\n        let res = {};\n        while (retries > 0) {\n          //sleep the polling\n          await new Promise(r => setTimeout(r, 15000));\n          res = await Pact.fetch.poll(txReqKeys, kadenaAPI.meta.host);\n          try {\n            if (res[signed.hash].result.status) {\n              retries = -1;\n            } else {\n              retries = retries - 1;\n            }\n          } catch(e) {\n              retries = retries - 1;\n          }\n        };\n        //keep transaction response in local state\n        setTxRes(res)\n        if (res[signed.hash].result.status === \"success\"){\n          console.log(\"tx status set to success\");\n          //set state for transaction success\n          setTxStatus('success');\n        } else if (retries == 0) {\n          console.log(\"tx status set to timeout\");\n          setTxStatus('timeout');\n        } else {\n          console.log(\"tx status set to failure\");\n          //set state for transaction failure\n          setTxStatus('failure');\n        }\n      } catch(e) {\n        // TODO: use break in the while loop to capture if timeout occured\n        console.log(\"tx api failure\",e);\n        setTxRes(e);\n        setTxStatus('failure');\n      }\n    } catch(e){\n      console.log(e);\n      console.log(\"tx status set to validation error\");\n      //set state for transaction construction error\n      setTxStatus('validation-error')\n    }\n}\nexport const RenderGuardians = (props) => {\n  return (\n    <table className=\"ui very basic collapsing celled table\">\n      <thead>\n        <tr>\n          <th>Guardian</th>\n          <th>Committed KDA</th>\n          <th>Approved Hash</th>\n          <th>Approval Date</th>\n          <th>Guard</th>\n        </tr>\n     </thead>\n     <tbody>\n      { props.guardians.map((g) => {return(\n        <tr key={g[\"k\"]}>\n          <td>\n            {g[\"k\"]}\n          </td>\n          <td>\n            {renderPactValue(g[\"committed-kda\"])}\n          </td>\n          <td>\n            {g[\"approved-hash\"]}\n          </td>\n          <td>\n            {renderPactValue(g[\"approved-date\"])}\n          </td>\n          <td>\n            {renderPactValue(g[\"guard\"])}\n          </td>\n        </tr>\n      )})}\n    </tbody>\n  </table>\n  )\n};\n\nexport const RegisterAmbassador = (props) => {\n  const [grd, setGrd] = useState( \"\" );\n  const [newAmb, setNewAmb] = useState( \"\" );\n  const [ambGrd, setAmbGrd] = useState( \"\" );\n  const [txStatus, setTxStatus] = useState(\"\");\n  const [tx, setTx] = useState( {} );\n  const [txRes, setTxRes] = useState( {} );\n\n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n      console.log(grd,newAmb,ambGrd);\n      sendGuardianCmd(grd\n        ,`(${kadenaAPI.contractAddress}.register-ambassador \"${grd}\" \"${newAmb}\" (read-keyset 'ks))`\n        ,{ks: JSON.parse(ambGrd)}\n        ,setTx,setTxStatus,setTxRes)\n      };\n\n  return (\n    <div>\n      <Message attached header=\"Add Ambassador\"/>\n        <Form onSubmit={handleSubmit} className=\"attached fluid segment\">\n          <Dropdown\n            fluid\n            search\n            selection\n            placeholder=\"Select Guardian\"\n            required\n            options={props.guardians.map((g) => {return {key: g['k'], value:g['k'], text:g['k']};})}\n            onChange={(e,d) => {setGrd(d.value)}}\n            >\n          </Dropdown>\n          <Form.Field required>\n            <label>Ambassador Account Name</label>\n            <input\n              value={newAmb}\n              onChange={e => setNewAmb(e.target.value)}/>\n          </Form.Field>\n          <Form.TextArea required\n            label=\"Ambassador Account Guard\"\n            placeholder={JSON.stringify({\"pred\":\"keys-all\",\"keys\":[\"8c59a322800b3650f9fc5b6742aa845bc1c35c2625dabfe5a9e9a4cada32c543\"]},undefined,2)}\n            value={ambGrd}\n            onChange={e => setAmbGrd(e.target.value)}\n            />\n          <Button color='blue' type='submit'>Submit</Button>\n        </Form>\n        <PactTxStatus tx={tx} txRes={txRes} txStatus={txStatus}/>\n    </div>\n\n  );\n}\n","//basic React api imports\nimport React from \"react\";\n//config file for blockchain calls\nimport { renderPactValue } from \"./util.js\";\n\n\nexport const RenderAmbassadors = (props) => {\n  return (\n    <table className=\"ui very basic collapsing celled table\">\n      <thead>\n        <tr>\n          <th>Ambassador</th>\n          <th>Active</th>\n          <th>Voted To Freeze</th>\n          <th>Guard</th>\n        </tr>\n     </thead>\n     <tbody>\n      { props.ambassadors.map((g) => {return(\n        <tr key={g[\"k\"]}>\n          <td>\n            {g[\"k\"]}\n          </td>\n          <td>\n            {renderPactValue(g[\"active\"])}\n          </td>\n          <td>\n            {renderPactValue(g[\"voted-to-freeze\"])}\n          </td>\n          <td>\n            {renderPactValue(g[\"guard\"])}\n          </td>\n        </tr>\n      )})}\n    </tbody>\n  </table>\n  )\n};\n","//basic React api imports\nimport React from \"react\";\nimport { kadenaAPI, keyFormatter } from \"./kadena-config.js\";\nimport { PactSingleJsonAsTable } from \"./util.js\";\n\nexport const KadenaConfig = () => {\n  return (\n    <PactSingleJsonAsTable\n      json={kadenaAPI}\n      keyFormatter={keyFormatter}\n      />\n  )\n};\n","//basic React api imports\nimport React from \"react\";\n//config file for blockchain calls\nimport Pact from \"pact-lang-api\";\nimport { kadenaAPI } from \"./kadena-config.js\";\nimport { renderPactValue, PactSingleJsonAsTable, dashStyleNames2Text } from \"./util.js\";\n\nexport const getContractState = async (cmd) => {\n  //calling get-all() function from smart contract\n    const res = await Pact.fetch.local(\n      {\n        pactCode: `(${kadenaAPI.contractAddress}.${cmd})`,\n        //pact-lang-api function to construct transaction meta data\n        meta: Pact.lang.mkMeta(\n          kadenaAPI.meta.sender,\n          kadenaAPI.meta.chainId,\n          kadenaAPI.meta.gasPrice,\n          kadenaAPI.meta.gasLimit,\n          kadenaAPI.meta.creationTime(),\n          kadenaAPI.meta.ttl\n        ),\n      },\n      kadenaAPI.meta.host\n    );\n    const all = res.result.data;\n    //sorts memories by least recent\n    console.log(\"local query data\",all);\n    return(all);\n};\n\nexport const RenderInitState = (props) => {\n  return (\n   <PactSingleJsonAsTable\n    json={props.initState}\n    header={[\"\",\"Status\"]}\n    keyFormatter={dashStyleNames2Text}\n    />\n  )\n};\n\n//   return (\n//     <table className=\"ui very basic collapsing celled table\">\n//       <thead>\n//         <tr>\n//           <th></th>\n//           <th>Status</th>\n//         </tr>\n//      </thead>\n//      <tbody>\n//        <tr>\n//          <td>\n//            <h4>\n//              Guardians\n//            </h4>\n//          </td>\n//          <td>\n//             { renderPactValue( props.initState[\"guardian-count\"]) }\n//          </td>\n//        </tr>\n//        <tr>\n//          <td>\n//            <h4>\n//              Ambassadors\n//            </h4>\n//          </td>\n//          <td>\n//            { renderPactValue( props.initState[\"ambassador-count\"]) }\n//          </td>\n//        </tr>\n//        <tr>\n//          <td>\n//            <h4>\n//              DAO Frozen Until\n//            </h4>\n//          </td>\n//          <td>\n//           { renderPactValue( props.initState[\"dao-frozen-until\"]) }\n//          </td>\n//        </tr>\n//        <tr>\n//          <td>\n//            <h4>\n//              Last Ambassador Deactivation\n//            </h4>\n//          </td>\n//          <td>\n//            { renderPactValue( props.initState[\"last-ambassador-deactivation\"]) }\n//          </td>\n//        </tr>\n//        <tr>\n//          <td>\n//            <h4>\n//              Proposed Upgrade Hash\n//            </h4>\n//          </td>\n//          <td>\n//            { renderPactValue( props.initState[\"proposed-upgrade-hash\"]) }\n//          </td>\n//        </tr>\n//        <tr>\n//          <td>\n//            <h4>\n//              Proposed Upgrade Time\n//            </h4>\n//          </td>\n//          <td>\n//            { renderPactValue( props.initState[\"proposed-upgrade-time\"]) }\n//          </td>\n//        </tr>\n//      </tbody>\n//    </table>\n//   )\n// };\n","//basic React api imports\nimport React, { useState, useEffect } from \"react\";\n//semantic ui for styling\nimport {\n  Segment,\n  Input,\n  Form,\n  Button,\n  Select,\n  Feed,\n  Dropdown,\n  Icon,\n  Message,\n  Loader,\n} from \"semantic-ui-react\";\n//pact-lang-api for blockchain calls\nimport Pact from \"pact-lang-api\";\n//config file for blockchain calls\nimport { kadenaAPI } from \"./kadena-config.js\";\nimport { renderPactValue } from \"./util.js\";\nimport { RenderGuardians, RegisterAmbassador } from \"./Guardians.js\";\nimport { RenderAmbassadors } from \"./Ambassadors.js\";\nimport { PactTxStatus } from \"./PactTxStatus.js\"\nimport { KadenaConfig } from \"./KadenaConfig.js\"\nimport { RenderInitState, getContractState } from \"./InitState.js\";\n\nconst App = () => {\n  /*\n\n    REACT COMPONENT SETUP\n\n      we will make use of standard react apis\n\n      useState -> page state management\n      useEffect -> fetch existing memories on page load\n\n  */\n\n  const [initState, setInitState] = useState( {} );\n  const [guardians, setGuardians] = useState( [] );\n  const [ambassadors, setAmbassadors] = useState( [] );\n\n  const getInitState = async () => {\n    const res = await getContractState(\"view-state\");\n    setInitState(res);\n  };\n\n  const getAmbassadors = async () => {\n    const res = await getContractState(\"view-ambassadors\");\n    setAmbassadors(res);\n  };\n\n  const getGuardians = async () => {\n    const res = await getContractState(\"view-guardians\");\n    setGuardians(res);\n  };\n\n  useEffect(() => {\n    getInitState();\n    getAmbassadors();\n    getGuardians();\n  }, []);\n\n  /*\n\n    BLOCKCHAIN TRANSACTIONS\n\n      use pact-lang-api npm package to interact with Kadena blockchain networks\n        https://github.com/kadena-io/pact-lang-api\n\n      all transaction setup is ./kadena-config.js\n\n  */\n\n\n  return (\n    <Segment>\n      <h1>\n        <a>Welcome to DAO.init</a>\n      </h1>\n      <KadenaConfig/>\n      <h2>\n        Contract State\n      </h2>\n      <RenderInitState initState={initState}/>\n      <h2>\n        Guardians\n      </h2>\n      <RenderGuardians guardians={guardians}/>\n      <h2>\n        Ambassadors\n      </h2>\n      <RenderAmbassadors ambassadors={ambassadors}/>\n        <RegisterAmbassador guardians={guardians}/>\n    </Segment>\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n        <Router basename={process.env.PUBLIC_URL}>\n          <App />\n        </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/*\n\nBLOCKCHAIN CONFIGURATION FILE\n\n  initalize all data for pact-lang-api kadena blockchain calls\n\n  modify this file to interact with different\n    chains, networks, contracts\n\n  documentation:\n    https://pact-language.readthedocs.io/en/stable/\n\n  pact tutorials:\n    https://pactlang.org/\n\n*/\n\n//chain that contract lives on\nvar chainId = \"0\";\n\n//id of network version\nvar networkId = \"testnet04\";\n\n//network node\nvar node = \"api.testnet.chainweb.com\";\n\n//unique contract name\nvar contractName = \"init\";\n\n//unique gas station contract name\nvar gasStationName = \"memory-wall-gas-station\";\n\n//namespace that precedes contract name\nvar namespace = \"free\";\n\n//api host to send requests\nvar host = `https://${node}/chainweb/0.0/${networkId}/chain/${chainId}/pact`;\n\n//creation time for request\nvar creationTime = () => Math.round(new Date().getTime() / 1000) - 15;\n\n//JSON with all necessary blockchain call data\nvar kadenaAPI = {\n  contractName: contractName,\n  gasStationName: gasStationName,\n  namespace: namespace,\n  contractAddress: `${namespace}.${contractName}`,\n  gasStationAddress: `${namespace}.${gasStationName}`,\n  explorerURL: `https://explorer.chainweb.com/${networkId.slice(0, -2)}`,\n  meta: {\n    networkId: networkId,\n    chainId: chainId,\n    host: host,\n    creationTime: creationTime,\n    //gas price at lowest possible denomination\n    gasPrice: 0.00000000001,\n    //high gas limit for tx\n    gasLimit: 10000,\n    //time a tx lives in mempool since creationTime\n    ttl: 28800,\n    //sender === gas payer of the transaction\n    //  set to our gas station account defined in memory-wall-gas-station.pact\n    sender: \"mw-free-gas\",\n    //nonce here doesnt matter since the tx will never have the same hash\n    nonce: \"some nonce that doesnt matter\",\n  },\n};\n\nconst keyFormatter = (str) =>\n  str.replace(new RegExp(\"[A-Z]+\",\"gm\"),\" $&\").replace(new RegExp(\"^[a-z]\",\"gm\"),k => k.toUpperCase());\n\nmodule.exports = { kadenaAPI: kadenaAPI, keyFormatter: keyFormatter }\n"],"sourceRoot":""}